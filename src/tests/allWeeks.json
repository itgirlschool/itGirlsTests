[
  {
    "id": "92f0172793284976a22affda7f2fdb25",
    "title": "Основы HTML",
    "week": "week-1",
    "questions": [
      {
        "options": [
          {
            "title": "Это дополнительное свойство внутри тега",
            "isValid": true,
            "comment": "верно! Внутри тега можно подключать атрибуты, которое влияет на параметры тега"
          },
          {
            "title": "Это специальный код для создания элементов веб-страницы",
            "isValid": false,
            "comment": "Это определение тега, а не атрибута"
          },
          {
            "title": "Логическое создание блоков на странице",
            "isValid": false,
            "comment": "а это про тег <div>"
          },
          {
            "title": "Небольшие подсказки для того, как использовать сами теги",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое атрибут тега?"
      },
      {
        "options": [
          {
            "title": "put, post, update",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "hide, try, catch",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "span, div, h1, h2",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "style, class, src, alt",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие есть атрибуты у тега?"
      },
      {
        "options": [
          {
            "title": "Чтобы выделять текст жирным шрифтом",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для логической разбивки сайта на блоки",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для подключения картинки",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Вынести небольшой текст без переноса в блок",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Зачем нужен тег span?"
      },
      {
        "options": [
          {
            "title": "через <p>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "с помощью <img>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "с помощью <span>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "через <nav>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как добавить иконку?"
      },
      {
        "options": [
          {
            "title": "<ol> <li>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<ul> <p>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<ul> <li>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<span><p>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать маркированный список?"
      },
      {
        "options": [
          {
            "title": "<div>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<b>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<span>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<p>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как выделить слово жирным шрифтом?"
      }
    ]
  },
  {
    "id": "a1f2ce637f8e4befb8747b65a6ee9465",
    "title": "Семантическая верстка и разметка ",
    "week": "week-2",
    "questions": [
      {
        "options": [
          {
            "title": "проверка соответствия реальных и ожидаемых результатов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "проверка типа документа",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "автоматическая проверка кода на соответствие каким-то правилам",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Свод требований конкретного пользователя или услуги",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое валидация?"
      },
      {
        "options": [
          {
            "title": "&laquo;",
            "isValid": false,
            "comment": "Код символа «"
          },
          {
            "title": "&copy;",
            "isValid": true,
            "comment": "код символа ©"
          },
          {
            "title": "&lt;",
            "isValid": false,
            "comment": "Код символа <"
          },
          {
            "title": "&rarr;",
            "isValid": false,
            "comment": "код символа →"
          }
        ],
        "type": "solo",
        "title": "Какой спецсимвол используется для указания знака ©?"
      },
      {
        "options": [
          {
            "title": "<legend>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<tfoot>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<video>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Найдите пример еще тега HTML5, который не вошел в урок"
      },
      {
        "options": [
          {
            "title": "<main>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<footer>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<nav>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<aside>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой тег мы используем для создания меню?"
      },
      {
        "options": [
          {
            "title": "сложности в поддержании кода",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "теряется функциональность элементов сайтов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "для поисковых систем элементы страницы одинаковы",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "плохо читаемый код другими разработчикам",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Чем плохо использовать div для всего?"
      },
      {
        "options": [
          {
            "title": "muted",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "loop",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "preload",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "controls",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой атрибут выключает звук при воспроизведении видеофайла?"
      },
      {
        "options": [
          {
            "title": "задать значение type=“group”",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "задать значение type=“block”",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "задать одинаковое значение атрибуту name",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "задать одинаковое значение атрибуту value",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать блок радиокнопок, чтобы выбирался только один пункт?"
      },
      {
        "options": [
          {
            "title": "input type=\"radio”",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "date type=“input”",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "input type=“date”",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким тегом можно сделать поле ввода даты?"
      },
      {
        "options": [
          {
            "title": "с помощью атрибута selected",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "с помощью атрибута chosen",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "прописать в атрибуте name = selected",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "назначить тегом select",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как определяется, какой именно пункт будет выбран по умолчанию в выпадающем списке?"
      },
      {
        "options": [
          {
            "title": "использование большого кол-ва тегов, соблюдение определённых размеров блоков",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "универсальная разметка, которую можно использовать для создания разных сайтов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "работает, проходит валидацию, соблюдение определенного стиля кода",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое хорошая разметка?"
      }
    ]
  },
  {
    "id": "40e6571d49fc40219e7c2bb829455d5c",
    "title": "Графика",
    "week": "week-3",
    "questions": [
      {
        "options": [
          {
            "title": "SVG",
            "isValid": false,
            "comment": "не предназначен для фотографий. Это векторный формат "
          },
          {
            "title": "JPEG или JPG",
            "isValid": true,
            "comment": "верно! для больших фото лучше всего подойдет этот формат"
          },
          {
            "title": "GIF",
            "isValid": false,
            "comment": "этот формат только для анимаций"
          },
          {
            "title": "PNG",
            "isValid": false,
            "comment": "Лучше подходит для иконок, иллюстраций, схем"
          }
        ],
        "type": "solo",
        "title": "Какой формат картинки лучше всего подходит для большого фото?"
      },
      {
        "options": [
          {
            "title": "Хранит не само изображение, а инструкцию по его построению",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Только 256 цветов и только для анимированных картинок",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Не теряет качество при сжатии фотографии",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Не поддерживает прозрачность ",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем особенность формата SVG?"
      },
      {
        "options": [
          {
            "title": "JPEG или JPG",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "GIF",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "PNG",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "SVG",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой формат картинки идеально подходит для логотипа?"
      },
      {
        "options": [
          {
            "title": "SVG",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "GIF",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "PNG",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "JPEG или JPG",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие форматы поддерживают анимацию?(2 варианта)"
      },
      {
        "options": [
          {
            "title": "просто словами ‘green’, ‘red’ итд",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "#000000 двоичным кодом",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "#000000 16-ным кодом",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "тег background-сolor и прописываем словами",
            "isValid": false,
            "comment": "style background-color это атрибут, а не тег"
          },
          {
            "title": "RGB или RGBA",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какими способами можно указывать цвет (3 варианта)?"
      },
      {
        "options": [
          {
            "title": "c помощью background: linear-gradient",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "с помощью свойства gradient",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "с помощью img: radial-gradient",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Самостоятельно разберитесь как можно задать цвет в виде градиента?"
      },
      {
        "options": [
          {
            "title": "с помощью последних двух букв #FFFFFFFF",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "с помощью RGBA",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "с помощью RGB",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "прописать значение color: transparent",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Как можно задавать прозрачность для блока?(2 варианта)"
      },
      {
        "options": [
          {
            "title": "Относительные пути",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Абсолютные пути",
            "isValid": false,
            "comment": "это будет работать только для программиста в процессе разработки"
          },
          {
            "title": "Интернет-пути",
            "isValid": false,
            "comment": "ссылка в интернете может в любой момент стать недействительной - и картинка исчезнет"
          }
        ],
        "type": "solo",
        "title": " Какой способ подключения файлов самый лучший?"
      },
      {
        "options": [
          {
            "title": "использовать vw и vh",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "задать размер в px",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "задать размер в % относительно родительского элемента",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать картинку на 45% размера экрана?"
      }
    ]
  },
  {
    "id": "4c18e67db6f645948a5a54dcf95e4db1",
    "title":"Стилизация и CSS",
    "week": "week-4",
    "questions": [
      {
        "options": [
          {
            "title": "Для обеспечения HTML-элементов лучшей кроссбраузерностью в стилях по умолчанию",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Чтобы писать код по правилам, установленными компанией или разработчиками",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для подсвечивания синтаксических ошибок в коде",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Зачем нужен Normalize.css?"
      },
      {
        "options": [
          {
            "title": "это подключенные модули, которые влияют на внешний вид всего сайта",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "это конструкции, которые позволяют создавать инструкции для изменения отображения либо поведения элементов страницы",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "это свод правил оформления элементов на сайте с помощью CSS правил",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое CSS-директивы?"
      },
      {
        "options": [
          {
            "title": "margin - пространство за его рамками, а padding - это пространство внутри чего-либо",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "margin - пространство за рамками элемента, а padding - это пространство внутри родительского элемента ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "margin - задается в процентах, а padding - в px",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "margin - пространство внутри элемента, а padding - это пространство снаружи элемента",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем разница между margin и padding?"
      },
      {
        "options": [
          {
            "title": "#link .main",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "одинаково приоритетны",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "span #login",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какое из свойств будет приоритетнее - #link .main или span #login?"
      },
      {
        "options": [
          {
            "title": "В CSS  нет тега img",
            "isValid": false,
            "comment": ""
          },
          {
            "title": " В CSS3 есть возможность адаптивной верстки ",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "CSS не поддерживает несемантическую верстку",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем разница между CSS1 и CSS3?"
      },
      {
        "options": [
          {
            "title": "Псевдокласс - это селектор, который определяет дополнительные свойства элемента и его значения, псевдоэлемент - это элемент, который привязан к нескольким селекторам",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Псевдоэлемент - это селектор, который выбирает элемент, находящийся в специфическом состоянии. Псевдокласс - это селектор, который используют для вставки содержимого, которого нет в исходном коде",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Псевдокласс- это селектор, определяющий динамическое состояние элементов с помощью действий пользователя. Псевдоэлемент - это селектор, который используют для создания “виртуальных тегов”",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое псевдоклассы? А псевдоэлементы?"
      },
      {
        "options": [
          {
            "title": "<big>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<aside>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<nav>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<layer>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<main>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<hr>",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Изучите самостоятельно статью(см.в доп.материалах) про \"плохие\" теги  и выберите теги, которые нежелательно использовать (3 варианта)"
      },
      {
        "options": [
          {
            "title": "Свойства, которые не были указаны полностью, сбрасываются к значениям по умолчанию. При необходимости можно группировать свойства по смыслу",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Код становится менее читабельным и в дальнейшем все труднее поддерживать код, но если и использовать сокращенные названия, то с дополнительными комментариями для разработчиков ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Это нарушает свод правил наименований css свойств. Но при необходимости можно группировать свойства по смыслу  ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Может привести к синтаксическим ошибкам и невалидному коду. Следует прописывать названия, группируя их по смыслу",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Почему не стоит использовать сокращенную запись без необходимости? И если все же использовать, как это делать правильно?"
      },
      {
        "options": [
          {
            "title": "через тег link и атрибут animation",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "через свойство @animation-fixed и animation-border",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "через свойства @keyframes и animation",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Через какие два свойства можно подключить анимацию? "
      }
    ]
  },
  {
    "id": "47cb9bfe84dc4cb98ae67b4ad0239a70",
    "title": "Позиционирование элементов",
    "week": "week-5",
    "questions": [
      {
        "options": [
          {
            "title": "Позволяет создать адаптивный дизайн намного проще, чем другие виды позиционирования",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Работает быстрее и эффективнее других видов позиционирования ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Намного проще в понимании кода и его поддержании. Меньше строк кода в отличии от других способов позиционирования",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Почему в большинстве ситуаций стоит использовать flexbox-позиционирование?"
      },
      {
        "options": [
          {
            "title": "Лучший способ создания динамических таблиц",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "С его помощью легче работать с позиционированием элементов, у которых динамическая высота",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "С его помощью можно центрировать элементы по горизонтали и вертикали",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Самостоятельно изучите способ позиционирования через display: table и ответьте на вопрос, для чего лучше всего подходит?"
      },
      {
        "options": [
          {
            "title": "с помощью align-items:center",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "justify-content:center",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "margin: auto 0",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "top:50%",
            "isValid": false,
            "comment": ""
          },
          {
            "title": " с помощью align-content",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какими способами можно сделать горизонтальное выравнивание по центру?"
      },
      {
        "options": [
          {
            "title": "Левая и правая оси. Задать flex-direction:left или flex-direction:right",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Родительская и дочерняя. Задать flex-direction:parent или flex-direction:child",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Горизонтальная и вертикальная. Задать flex-direction:vertical или flex-direction:horizontal",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Горизонтальная и вертикальная. Задать flex-direction:column или flex-direction:row",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие есть оси во флекс-верстке и как задается их направление?"
      },
      {
        "options": [
          {
            "title": "Легко адаптирует элементы под разные экраны монитора",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Позволяет умещать в родительском элементе весь контент и адаптирует размер родителя в зависимости от количества дочерних элементов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Позволяет точно менять то, как блочная модель работает и как вычисляются размеры элемента",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем преимущество box-sizing?"
      },
      {
        "options": [
          {
            "title": "flex-grow определяет, может ли ширина элемента уменьшаться, flex-shrink - расти",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "flex-grow определяет, может ли ширина элемента расти, flex-shrink - уменьшаться",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "flex-grow применяется к вертикальным элементам, а flex-shrink - к горизонтальным",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Чем отличается flex-grow от flex-shrink?"
      },
      {
        "options": [
          {
            "title": "Для установки приоритета дочерних элементов внутри элемента с этим свойством",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для того, чтобы задать размер элемента относительно родительского элемента",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "flex-элементы выстраиваются в порядке заданных значений order во flex-контейнере",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Зачем нужно свойство order?"
      },
      {
        "options": [
          {
            "title": "Скрыть опции в навигационной панели",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для создания всплывающего меню",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Зафиксировать элемент относительно прокручиваемой страницы",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Зафиксировать элементы в контейнере",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для какой ситуации подойдет position:fixed?"
      },
      {
        "options": [
          {
            "title": "float",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "display:none",
            "isValid": false,
            "comment": "это удаляет элемент из потока документа "
          },
          {
            "title": "display:inline",
            "isValid": false,
            "comment": "это делает элемент строчным и подходит лучше всего для маленьких кусков текста без переноса"
          },
          {
            "title": "display:block",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким способом лучше всего верстать большие блоки текста?"
      },
      {
        "options": [
          {
            "title": "Как в обычной блочной модели:рамки+ отступы+размеры содержимого",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Как в float-контейнере:рамки+размеры содержимого",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Только размеры содержимого, не учитываются рамки и отступы",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как рассчитывается размер flex-контейнера?"
      }
    ]
  },
  {
    "id": "e7bc9ea63c2640188f12e36938d9b44e",
    "title": "CSS Grid",
    "week": "week-6",
    "questions": [
      {
        "options": [
          {
            "title": "Единица измерения ширины, которая рассчитывается от родительского grid - контейнера",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Единица измерения высоты grid-элемента, которая вычисляется в зависимости от размера экрана",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Единица измерения, которая рассчитывается, исходя из количества доступного пространства grid-контейнера",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что за единица измерения - fr?",
        "image": null
      },
      {
        "options": [
          {
            "title": "grid-templates-columns:repeat(5, 1fr)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "grid-templates-columns:20px, 20px, 20px, 20px, 20px",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "grid-templates-rows:20%, 20%, 20%, 20%, 20%",
            "isValid": false,
            "comment": "rows это не колонки, а строки"
          },
          {
            "title": "grid-templates-columns: 1fr, 1fr, 1fr, 1fr, 1fr",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Как можно задать грид с 5 колонками шириной по 20%? (Выбрать 2 варианта)",
        "image": null
      },
      {
        "options": [
          {
            "title": "auto-fill заполняет все пустое пространство в контейнере элементами и растягивает их при необходимости, auto-fit также растягивает дочерние элементы на весь контейнер, но только по высоте",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "auto-fill помещает повторяющиеся элементы в один ряд, непоместившихся на другую строку, не занимая пустое пространство, auto-fit почти также, только пустое пространство будет схлопываться и растягивать элементы",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "auto-fit помещает одинаковые элементы в один ряд, не заполняя пустое пространство, следующие элементы переносятся на другую строку, auto-fill не переносит на следующую строку, а растягивает элементы",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое auto-fill и auto-fit?",
        "image": null
      },
      {
        "options": [
          {
            "title": "display: grid;                                               grid-template-columns: 100px, 30%, 1fr;                                                                   grid-template-rows: 200px, 100px;",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "display:grid;                                               grid-template-rows:100px, 30%, 350px;                                                            grid-template-columns: 200px, 100px",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "display: flex;                                                              grid-template-columns: 100px, 30%;                    grid-template-rows: 200px, 100px;",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать табличку? Параметры: первая колонка 100 пикселей, вторая строчка 30%. Первая строчка высота 200 пикселей, вторая строчка - 100 пикселей.",
        "image": "/src/test/assets/images/images-test-6.png"
      },
      {
        "options": [
          {
            "title": "justify-items: space-between",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "grid-template-columns: 20px, 10px, 20px",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "align-items: center",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "justify-content: space-between",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "justify-content: space-around",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать такое выравнивание в грид-контейнере?",
        "image": "/src/test/assets/images/images2-test-6.png?&width=860"
      },
      {
        "options": [
          {
            "title": "Это объединенные колонки в один контейнер, задается свойством grid-area: 1/4, где указывается индекс первой колонки и последней ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Это пространство внутри grid-контейнера, которое может содержать в себе несколько grid-элементов, grid-area:1/3/4/2;",
            "isValid": true,
            "comment": "первая цифра-grid-row-start, вторая - grid-column-start, третья - grid-row-end, последняя - grid-column-end"
          },
          {
            "title": "Это grid-контейнер, которому можно задать определенные размеры и определенное количество grid-элементов",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое и как задается grid-area?",
        "image": null
      },
      {
        "options": [
          {
            "title": "auto-space",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "auto-fill",
            "isValid": false,
            "comment": "свободное пространство не схлопывается, как в auto-fit"
          },
          {
            "title": "auto-fit",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "grid-area",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "justify-content: stretch",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким свойством можно задать такое поведение элементов? (Если не отображается см. п.1 доп.материалов)",
        "image": "/src/test/assets/images/images3-test-6.png?&width=860"
      },
      {
        "options": [
          {
            "title": "grid-template-columns: 12*fr;",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "grid-template-rows: repeat(12, 1fr);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "grid-template-columns: repeat(1fr, 12);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "grid-template-columns:repeat(12, 20px);",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как проще всего задать 12 одинаковых по ширине колонок?",
        "image": null
      }
    ]
  },
  {
    "id": "1091860691d342eba02cc29f812b68ba",
    "title": "Адаптивная вёрстка",
    "week": "week-7",
    "questions": [
      {
        "options": [
          {
            "title": "Через медиа запросы задать размер текста",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Через свойство mobile-screen",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "через тег picture и с определенными значениями атрибутов width и text",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "через тег meta с определенными значениями атрибутов name и content",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать так, чтобы при просмотре на телефоне текст стал читаемым, а картинка - большой?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F02035b41-587a-4e1c-b42b-609ec9ef98af%2FUntitled.png?table=block&id=36c54970-56ca-4a32-9656-3a6ea0a33173&spaceId=f098cfa4-dc31-41b0-a467-db910d3cff90&width=1920&userId=4bb0f614-bdb7-4a2e-9188-c56ac4c9ebb6&cache=v2"
      },
      {
        "options": [
          {
            "title": "адаптивный дизайн - один макет для разных видов устройств, отзывчивый дизайн - разный макет для всех устройств",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "адаптивный дизайн - один макет для разных видов устройств, отзывчивый дизайн - разный макет для разных видов устройств",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "адаптивный дизайн - один макет для разных видов устройств, отзывчивый дизайн - один макет для всех устройств",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем разница между адаптивным и отзывчивым веб-дизайном?",
        "image": null
      },
      {
        "options": [
          {
            "title": "em",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "%",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "px",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "vw",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие величины лучше использовать для шрифтов в гибком дизайне?",
        "image": null
      },
      {
        "options": [
          {
            "title": "отзывчивый вид. Mostly Fluid",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Отзывчивый вид. Layout Shifter",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "адаптивный вид. Column Drop",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "отзывчивый вид. Tiny Tweaks",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "адаптивный вид. Layout Shifter",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "адаптивный вид. Tiny Tweaks",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой вид верстки использован на картинке? К Какой категории шаблонов он относится?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fed52b7b7-5d10-46c7-8bf1-de4fda494f6d%2FUntitled.png?table=block&id=089e01a9-d5fd-4225-b7cb-a5be19a988a5&spaceId=f098cfa4-dc31-41b0-a467-db910d3cff90&width=1920&userId=4bb0f614-bdb7-4a2e-9188-c56ac4c9ebb6&cache=v2"
      },
      {
        "options": [
          {
            "title": "@media (min-width: 800px) and (max-width:1200px)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "@media (max-width:800px) and (min-width:1200px)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "@media screen and (max-width:1200px)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "@media (max-width:800) and (max-width:1200)",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как задать стили для экранов шириной от 800 до 1200px?",
        "image": null
      },
      {
        "options": [
          {
            "title": "min-width: 100px",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "width:100%",
            "isValid": true,
            "comment": "возможно еще через max-width"
          },
          {
            "title": "max-width: 2em",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "width: 1200px",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как можно задавать гибкие изображения?",
        "image": null
      },
      {
        "options": [
          {
            "title": "через свойство landscape. В режиме landscape ширина больше высоты, в отличии от режима portrait",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "через селектор .landscape { } В режиме landscape ширина меньше высоты, в отличии от режима portrait",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "через @media (orientation: landscape) В режиме landscape ширина больше высоты, в отличии от режима portrait",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как задать стили только для landscape поворота экрана? И чем отличается режим ",
        "image": null
      }
    ]
  },
  {
    "id": "413220107d874a2a86a695b4c3fd49de",
    "title": "CSS Фреймворки",
    "week": "week-8",
    "questions": [
      {
        "options": [
          {
            "title": "Сайты с различными JavaScript виджетами",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Сайты со встроенными JavaScript плагинами",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Всё перечисленное",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Адаптивные сайты",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Bootstrap позволяет создавать…",
        "image": null
      },
      {
        "options": [
          {
            "title": "Корректное отображение сайта и стабильная работа в современных браузерах",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Наличие большого количество готовых, хорошо продуманных компонентов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Все ответы верные",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Высокая скорость создания качественной адаптивной верстки",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие основные преимущества Bootstrap?",
        "image": null
      },
      {
        "options": [
          {
            "title": "<button type=”button” class=”btn btn-outline-success”>Желтая кнопка</button>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<button type=”button” class=”btn btn-outline-secondary”>Желтая кнопка</button>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<button type=”button” class=”btn btn-outline-danger”>Желтая кнопка<button>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<button type=”button” class=”btn btn-outline-warning”>Желтая кнопка</button>",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать желтую кнопку с помощью Bootstrap?",
        "image": null
      },
      {
        "options": [
          {
            "title": "<div class=”progress”><div class=”progress-bar” role=”progressbar” style=”width:25%” aria-valuenow=”25” aria-valuemin=”0” aria-valuemax=”100”>25%</div></div>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<div class=”progress”><div class=”progress-bar” role=”progressbar” style=”width:50%” aria-valuenow=”50” aria-valuemin=”0” aria-valuemax=”100”>25%</div></div>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<div class=”progress”><div class=”progress-bar” role=”progressbar” style=”width:75%” aria-value-now=”75” aria-valuemin=”0” aria-valuemax=”100”>25%</div></div>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<div class=”progress”><div class=”progress-bar” role=”progressbar” aria-valuenow=”0” aria-valuemin=”0” aria-valuemax=”100”>25%</div></div>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким компонентом Bootstrap можно задать такой элемент?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F100332d0-fcea-4f74-8070-52f051f57524%2FUntitled.png?table=block&id=1726e59b-cfbb-40f5-af70-1c89e41d94a0&spaceId=f098cfa4-dc31-41b0-a467-db910d3cff90&width=1920&userId=4bb0f614-bdb7-4a2e-9188-c56ac4c9ebb6&cache=v2"
      },
      {
        "options": [
          {
            "title": "Добавить класс no-gutters",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Добавить класс col-md-0",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Добавить класс padding-0",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Обернуть таблицу в <div class=”container”></div>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как убрать поля между колонками?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Кнопки",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Выпадающий список",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Текст",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Изображение",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что не включает карточка в Bootstrap?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Термин, отменяющий адаптивность колонок",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Автоматический перенос колонок на следующую строку",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Меняет направление колонок (с вертикального на горизонтальное)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Готовый шаблон для колонки",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое колонка auto-layout?",
        "image": null
      },
      {
        "options": [
          {
            "title": "align-items-center",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "align-items-end",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "align-items-middle",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "align-items",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой класс выполнит центрирование содержимого по горизонтали?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Все варианты верные",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Необходимо подключить скрипты Bootstrap",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Необходимо подключить стили Bootstrap",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что необходимо подключить для корректной работы Bootstrap?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Располагает два блока по правому краю",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Располагает два блока по центру",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Располагает два блока по левому краю",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Располагает два блока по краям",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что делает код ниже?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0e437c03-9072-469d-8bf8-13447cd04b66%2F%25D0%25A1%25D0%25BD%25D0%25B8%25D0%25BC%25D0%25BE%25D0%25BA_%25D1%258D%25D0%25BA%25D1%2580%25D0%25B0%25D0%25BD%25D0%25B0_2022-10-19_105054.jpg?id=5075e922-c3c8-4c54-b0fa-264eea01816c&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "container-fluid",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "container",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "fluid",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой класс растягивает блок на всю ширину экрана?",
        "image": null
      },
      {
        "options": [
          {
            "title": "lg, md, sm",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "lg, md",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "lg, md, sm, xs",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "md, sm, xs",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "sm, xs",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие есть типы адаптивности для классов в Bootstrap?",
        "image": null
      },
      {
        "options": [
          {
            "title": "offset-3",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "md-offset-3",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "col-offset-3",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "col-md-3",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "col-md-offset-3",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Где верно создан отступ в 3 ячейки?",
        "image": null
      },
      {
        "options": [
          {
            "title": "menu",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "head",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "navbar",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "navigation",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "nav",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "header",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой класс отвечает за добавление стилей к меню сайта?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Для создания пагинации",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для создания списка на странице",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для создания меню сайта",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Для создания шапки сайта",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для чего используются классы “nav navbar-nav”?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Делает цвет текста зеленым",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Делает цвет текста красным",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Делает цвет текста серым",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Делает цвет текста синим",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что делает класс “text-primary” с текстом?",
        "image": null
      },
      {
        "options": [
          {
            "title": "12",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "6",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "14",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "8",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Сколько сеток в Grid системе?",
        "image": null
      }
    ]
  },
  {
    "id": "6e660a237953475d871f985ea4c84ce1",
    "title": "Знакомство с JavaScript",
    "week": "week-9",
    "questions": [
      {
        "options": [
          {
            "title": "variable Num;",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let num;",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "v Num;",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "$Num;",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как объявляется переменная в JavaScript?",
        "image": null
      },
      {
        "options": [
          {
            "title": "msg(’Hello World!’)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "alertBox(’Hello World!’)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "msgBox(’Hello World!’);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "console.log(’HelloWorld!’);",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как можно вывести сообщение “Hello World!” с помощью JavaScript?",
        "image": null
      },
      {
        "options": [
          {
            "title": "hello 1\nhello “name”\nhello Ilya",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "hello “1”\nhello “name”\nhello “Ilya”",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "hello 1\nhello Ilya\nhello Ilya",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет скрипт?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fce05f956-99b3-47e1-b5d9-bef57491d228%2F9weekTask3.png?table=block&id=0a228719-775f-4849-9389-995dfbe5a34e&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "7",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "5",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "2",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "undefined",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какое значение будет в z?\nlet x = 5;         \nlet y = 2;        \nlet z = x + y;\nconsole.log(z);",
        "image": null
      },
      {
        "options": [
          {
            "title": "<#include ‘sample1.js’>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<script src=’sample1.js’>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<script name=’sample1.js’>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<script href=’sample1.js’>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как правильно подключить внешний скрипт?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Учитывается ли регистр в JavaScript?",
        "image": null
      },
      {
        "options": [
          {
            "title": "1",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "NaN",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "true",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "false",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что вернет следующий код: Boolean (10 > 9)",
        "image": null
      },
      {
        "options": [
          {
            "title": "28",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "underfined",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "true",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что вернёт код?\nfunction showX(x)\n{ \n\treturn x;\n}\nconsole.log(showX(28));",
        "image": null
      },
      {
        "options": [
          {
            "title": "5",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "3",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "underfined",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "-7",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что будет в x?\nx = 5; \nx -= 2;\nconsole.log(x);",
        "image": null
      },
      {
        "options": [
          {
            "title": "X",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "=",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "-",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "*",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой оператор используется для присвоения значения переменной?",
        "image": null
      }
    ]
  },
  {
    "id": "8b94d4ade9af48b8b6a6d012150e3e22",
    "title": "Функции",
    "week": "week-10",
    "questions": [
      {
        "options": [
          {
            "title": "Function expression",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Function indication",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Function declaration",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Function announcement",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Arrow functions",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие есть способы объявления функций?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Arrow Function",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Function Expression",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Function Declaration",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "function divide (a, b) {return a / b;} - это …",
        "image": null
      },
      {
        "options": [
          {
            "title": "let divide => function (a, b) {return a / b;}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let divide = function (a, b) {return a / b;}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "let function divide =  (a, b) {return a / b;}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как переделать функцию из предыдущего вопроса (function divide (a, b) {return a / b; }) в Function Expression?",
        "image": null
      },
      {
        "options": [
          {
            "title": "const divide = function(a, b) => a / b;",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "const divide => (a, b) = a / b;",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "const divide(a, b) => a / b;",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "const divide = (a, b) => a / b;",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "А теперь, давай трансформируем эту же функцию (function divide (a, b) {return a / b; }) в стрелочную:",
        "image": null
      },
      {
        "options": [
          {
            "title": "Отладкой",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Тестированием",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Логированием",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Процесс проверки того, что программное обеспечение или приложение не содержат ошибок называется…",
        "image": null
      },
      {
        "options": [
          {
            "title": "Логирование",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Починка",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Отладка (дебаггинг)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Головная боль",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Процесс исправления ошибок, обнаруженных во время тестирования - это…",
        "image": null
      },
      {
        "options": [
          {
            "title": "Процесс поиска и исправления ошибок в скрипте",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Вывод информации из кода в консоль для “внутреннего пользования”",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Проверка того, все ли работает как надо на странице",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Непонятное слово",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Логирование - это…",
        "image": null
      },
      {
        "options": [
          {
            "title": "Function Declaration и Function Expression отличаются синтаксисом",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Function Declaration объявляется отдельной конструкцией (function…) в основном потоке кода",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Function Declaration могут быть вызваны раньше своих определений",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Function Declaration создается внутри другого выражения или синтаксической конструкции",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Function Declaration создается, когда выполнение доходит до нее, а потом уже может использоваться",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Посмотрим на различия между Function Expression и Function Declaration: выбери верные выражения (несколько верных ответов):",
        "image": null
      },
      {
        "options": [
          {
            "title": "Выводит ошибки в консоли браузера ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Выводит различного рода информацию в консоли браузера",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Выводит различного рода информацию на экран",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Утешает и подбадривает программиста, у которого не работает код",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что делает функция console.log()?",
        "image": null
      },
      {
        "options": [
          {
            "title": "- это область видимости, которая определяет доступность (видимость) переменных",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "- это область видимости, которая даёт возможность получить доступ к переменным только внутри конкретных функций",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "- это область видимости, которая даёт возможность получить доступ ко всем скриптам и функциям на веб-странице",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое глобальная зона видимости функций?",
        "image": null
      }
    ]
  },
  {
    "id": "2386b19e376442acb6da18b52467074f",
    "title": "Знакомство с DOM",
    "week": "week-11",
    "questions": [
      {
        "options": [
          {
            "title": "Document Order Model - порядковая модель документа",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Document Object Module - модульная модель документа",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Document Object Management - управление объектами документа",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Document Object Model - объектная модель документа",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Data Object Model - модель объекта данных",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое DOM?",
        "image": null
      },
      {
        "options": [
          {
            "title": "IATA-код аэропрта Мумбаи :)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Browser Object Model - объектная модель браузера",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Business Object Model - модель объектов бизнес-процесса",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Base Object Model - модель объекта базы данных",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое BOM?",
        "image": null
      },
      {
        "options": [
          {
            "title": "let elem = document.getElementById (#age-table);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let elem = document.querySelector (”#age-table”);",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "let elem = document.getElementByAttribute (id, “age-table”);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let elem = document.getElementById (”age-table”);",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Есть такая страница. Как найти в ней таблицу с id=”age-table” ?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1aecdc8a-a08a-45c4-93ff-790013927643%2F%25D0%25A1%25D0%25BD%25D0%25B8%25D0%25BC%25D0%25BE%25D0%25BA_%25D1%258D%25D0%25BA%25D1%2580%25D0%25B0%25D0%25BD%25D0%25B0_2022-10-19_111335.jpg?table=block&id=b15e27be-49ce-4592-9cb3-a3c67d6c1571&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "nfocus",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "onkeydown",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "onclick",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "onmousedown",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какое событие не может быть вызвано кликом мыши?",
        "image": null
      },
      {
        "options": [
          {
            "title": "let formSearch = document.querySelector ('search');",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let formSearch = document.getElementsByTagName ('search');",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let formSearch = document.getElementsByName ('search');",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Есть такая страница. Как найти в ней форму form с именем name=”search”",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1db6b261-a1fc-4a4d-89e8-c7b2275721fd%2F%25D0%25A1%25D0%25BD%25D0%25B8%25D0%25BC%25D0%25BE%25D0%25BA_%25D1%258D%25D0%25BA%25D1%2580%25D0%25B0%25D0%25BD%25D0%25B0_2022-10-19_112844.jpg?table=block&id=6756d5ae-51fa-4c49-8787-1a129888aa9b&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "В HTML-файле у кнопки добавить событие, например: <button type=”button” onclick=”goToPage()”>Жми сюда!</button>. В JS-файле прописать, куда переходить, при клике на кнопку, например: function goToPage(){page.location = “",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "В HTML-файле у кнопки добавить событие, например: <button type=”button” onclick=”goToPage()”>Жми сюда!</button>. В JS-файле прописать, куда переходить, при клике на кнопку, например: function goToPage(){window.location.href = “",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сделать переход на другую страницу при клике на кнопку (без <a href=…>, только средствами JavaScript)?",
        "image": null
      },
      {
        "options": [
          {
            "title": "function clearInput(){document.getElementById(’someText’).value = “”}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "function clearInput(){document.getElementById(’someText’).value = 0}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "function clearInput(){document.getElementById(’someText’).value = null}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "function clearInput(){document.getElementById(’someText’).value = delete}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Как можно обнулить (очистить) значение внутри input?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd669cdc8-8960-48ad-949e-e52329dd8acf%2F%25D0%25A1%25D0%25BD%25D0%25B8%25D0%25BC%25D0%25BE%25D0%25BA_%25D1%258D%25D0%25BA%25D1%2580%25D0%25B0%25D0%25BD%25D0%25B0_2022-10-19_113429.jpg?id=9cca7e77-2814-4952-861f-66e6710cbd74&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Зависит от положения звёзд в момент клика",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нет",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Есть ссылка: <a href=”https://itgirlschool.com/”> Текст ссылки</a> На документе стоит обработчик: document.onclick = function (e) {e.preventDefault();} Произойдет ли при клике на ссылку переход по ней?",
        "image": null
      },
      {
        "options": [
          {
            "title": "onmouseover",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "onmousescroll",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "onmousemove",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "onclick",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какого события не существует?",
        "image": null
      },
      {
        "options": [
          {
            "title": "5",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "3",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "0",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "2",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "1",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Сколько детей (дочерних DOM-узлов) у элемента <ul> в примере ниже:\n<ul>\n    <li>Привет</li>\n    <li>Мир</li>\n</ul>",
        "image": null
      }
    ]
  },
  {
    "id": "0827bc02d72242b3999e116dbbd6970f",
    "title":"Строки и объект Math",
    "week": "week-12",
    "questions": [
      {
        "options": [
          {
            "title": "Одинарные",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Обратные",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Двойные",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Квадратные",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Фигурные",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие кавычки можно использовать для создания строк в JS?"
      },
      {
        "options": [
          {
            "title": "substr()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "IndexOf()",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "findStr()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "search()",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какими методами можно найти подстроку в строке?"
      },
      {
        "options": [
          {
            "title": "Заключение строк в двойные кавычки",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Перенос на новую строку",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Преобразование в верхний регистр",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Самостоятельно разберитесь, зачем нужен специальный символ \\n?"
      },
      {
        "options": [
          {
            "title": "findNum(”120р”)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "str.substr(/[0-9]/);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "str.replace(/[^0-9]/g,””)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Number(”120р”)",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как выделить из строки с денежной суммой (например, 120р. или 99€) только цифры, т.е. 120 и 99?"
      },
      {
        "options": [
          {
            "title": "(2,3): bcd",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "(2,3): cde",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "cde",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Uncaught SyntaxError",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет в консоль?\nconst str = \"abcdefghij\";\nconsole.log(\"(2,3): \"    + str.substr(2,3));"
      },
      {
        "options": [
          {
            "title": "Math.ceil",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Math.floor",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Math.round",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой из вариантов округления делает это по математическим правилам?"
      },
      {
        "options": [
          {
            "title": "Math.random(1, 100)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Math.random() * 10",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Math.random() * 101",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Math.random(*100)",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сгенерировать случайное число от 1 до 100?"
      },
      {
        "options": [
          {
            "title": "'розы такие красивые’",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "'розы такие розы’",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "'красивые такие розы’",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "'красивые такие красивые’",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким будет результат в приведенном ниже фрагменте кода?\nlet str = \"розы такие розы\";\nstr.replace(\"розы\",\"красивые\")"
      },
      {
        "options": [
          {
            "title": "The string length is 6",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Uncaught SyntaxError",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "The string length is 5",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет в консоль?\nconst x=\"Солнце\";\nconsole.log(\"The string length is \" + x.length)"
      }
    ]
  },
  {
    "id": "6f367491830d43f9a6dc45916509de9a",
    "title": "Даты и условия",
    "week": "week-13",
    "questions": [
      {
        "options": [
          {
            "title": "запрашивает текущий день, месяц и год",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "запрашивает текущий день недели",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "запрашивает текущий месяц",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для чего предназначен метод getDay()?"
      },
      {
        "options": [
          {
            "title": "с 1",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "с Понедельника",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "с 0",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Метод getDate() выводит текущее число, начиная с .."
      },
      {
        "options": [
          {
            "title": "Возвращает текущий час в 24-часовом формате",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Такого метода не существует",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Возвращает текущий час в формате am/pm",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для чего предназначен метод getHours() объекта Date?"
      },
      {
        "options": [
          {
            "title": "new Date(2021, 0, 24, 22, 51);",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "new Date(2021, 1, 22, 24, 51);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "new Date(24, 0, 2021, 22, 51);",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "new Date(24, 1, 2021, 22, 51);",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как создать дату 24 января 2021 года, 22 часа 51 минута? Временная зона - местная."
      },
      {
        "options": [
          {
            "title": "Mar Wed 00:00:00 GMT+0300 (Москва, стандартное время)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Fri Sep 02 2016 00:00:00 GMT+0300 (Москва, стандартное время)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Wed Mar 09 2016 00:00:00 GMT+0300 (Москва, стандартное время)",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет console.log(d)? let d = new Date(2016, 2, 9); console.log(d);"
      },
      {
        "options": [
          {
            "title": "Выведется только текущий год в формате “ГГ”\n",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Выведется текущий день, месяц, год и другая информация",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Выведется только текущий год в формате ”ГГГГ”",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Определите результат работы кода: let y = new Date(); let d = y.getFullYear(); console.log(d);"
      },
      {
        "options": [
          {
            "title": "Ошибка - неправильно описана функция получения даты",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Ошибка - используется неверная функция",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Ошибок нет",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Определите ошибку при выводе текущего года: let d = new Date(); let y = d.getFullYear(); console.log(y);"
      },
      {
        "options": [
          {
            "title": "Ошибка - используется неверная функция",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Ошибка - неправильно объявлена переменная",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Ошибок нет, вывод зависит от используемого браузера",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Определите ошибку при выводе текущей даты: let y = new Date(); let d = getFullYear(); console.log(d);"
      },
      {
        "options": [
          {
            "title": "Метода не существует",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Текущий час",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Текущее время (час:минута:секунда)",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Метод getHours() выводит…"
      },
      {
        "options": [
          {
            "title": "Это одно и тоже, разницы нет",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "getDay() - возвращает день месяца. getDate() - возвращает день недели (0 - воскресенье, 1 - понедельник, и т.д)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "getDay() - возвращает день недели (0 - Воскресенье, 1 - Понедельник, и т.д) getDate()- возвращает день месяца",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Чем в JavaScript отличается метод getDay() от getDate()?"
      }
    ]
  },
  {
    "id": "9f5fc49aed444b969668d885a93fd549",
    "title": "Массивы",
    "week": "week-14",
    "questions": [
      {
        "options": [
          {
            "title": "Через конструктор Array()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Создание массива с помощью копирования — метод slice(begin, end)\n",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Объявление массива как функции",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Все ответы верные",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какими способами можно объявлять массивы в JS?"
      },
      {
        "options": [
          {
            "title": "Поля в форме регистрации",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Лента в инстаграм",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Очередь в поликлинике",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Что из перечисленного могло бы быть массивом?"
      },
      {
        "options": [
          {
            "title": "pop",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "sort",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "map",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким методом можно удалить элемент из массива?"
      },
      {
        "options": [
          {
            "title": "arr.indexOf(1)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "arr[1]",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "arr[2]",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "arr.indexOf(2)",
            "isValid": false,
            "comment": ""
          },
          {
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как получить доступ ко второму элементу массива const arr = [3, 7, 10]?"
      },
      {
        "options": [
          {
            "title": "length",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "len",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "size",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какое свойство объектов массива даёт общее количество элементов в нём?"
      },
      {
        "options": [
          {
            "title": "1",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "4",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "5",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "const a = new Array(5), чему равна a.length?"
      },
      {
        "options": [
          {
            "title": "shift",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "unshift",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "forEach",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Метод перебора массива: каким методом можно перебрать массив?"
      },
      {
        "options": [
          {
            "title": "Ложь, arr[0] возвращает только значение, тогда как arr.shift() удаляет первый элемент",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Ложь, arr[0] возвращает только значение, тогда как arr.shift() возвращает и удаляет первый элемент",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Правда",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для заданного массива arr выражения arr[0] и arr.shift() делают одно и то же. Правда или ложь?"
      },
      {
        "options": [
          {
            "title": "sort",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "map",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "join",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким методом можно отсортировать массив?"
      },
      {
        "options": [
          {
            "title": "Нет, так как оператор typeof выдает ошибку с массивами",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можем использовать оператор typeof для проверки наличия массива",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Не можем, так как оператор typeof возвращает «объект» и для массивов",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можем ли мы проверить наличие массива с помощью оператора typeof? Если нет, то почему?"
      },
      {
        "options": [
          {
            "title": "Несколько переменных одного типа",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Совокупность переменных под одним именем",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Переменная, которая содержит множество значений",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что называется массивом?"
      },
      {
        "options": [
          {
            "title": "1",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "С любого числа",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "0",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "С какого порядкового номера начинаются массивы?"
      },
      {
        "options": [
          {
            "title": "Массив не имеет значений",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Множество",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Одно",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Сколько значений может иметь массив?"
      },
      {
        "options": [
          {
            "title": "undefined",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "0",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "1",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет в консоль код?\n\nlet arr = [1, 66, 20];\narr.length = 0;\nconsole.log(arr[0]);"
      },
      {
        "options": [
          {
            "title": "let styles = {”Джаз”, “Блюз”};",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let styles = [”Рэп”, “Регги”];",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "let styles = [”Джаз”, “Блюз”];",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Нужно создать массив styles с элементами “Джаз” и “Блюз”. Какая запись верная?"
      },
      {
        "options": [
          {
            "title": "Яблоко, Апельсин, Груша Груша",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "4",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Яблоко, Апельсин, Груша",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет следующий код? Вспомните, что вызов fruits.push(…) равнозначен fruits[fruits.length] = … . \n\nlet fruits = [”Яблоко”, “Апельсин”, “Груша”]; fruits.push(”Груша”);"
      },
      {
        "options": [
          {
            "title": "[10, 50, 88]",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "[50, 88]",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "false",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет в консоль код?\n\nlet nums = [10, 50, 88];\nnums.filter(function(n) {\nreturn n > 10;\n});\nconsole.log(nums);"
      }
    ]
  },
  {
    "id": "01d58dcc26e44cddb7a55d53a7c81e4a",
    "title": "Циклы",
    "week": "week-15",
    "questions": [
      {
        "options": [
          {
            "title": "Оба ответа верные",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Пропускает текущую итерацию",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Прерывает выполнение скрипта",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что делает ключевое слово continue внутри цикла?"
      },
      {
        "options": [
          {
            "title": "Правда",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Ложь",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Ключевое слово while повторяет выполнение цикла до тех пор, пока указанное условие не станет ложным. Правда или ложь?"
      },
      {
        "options": [
          {
            "title": "Ложь",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Правда",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Третий оператор цикла for всегда должен быть инкрементом (++). Правда или ложь?"
      },
      {
        "options": [
          {
            "title": "Проверяет условие перед каждой итерацией, есть возможность задать дополнительные настройки",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Проверяет условие после каждой итерации",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Проверяет условие перед каждой итерацией",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что делает цикл for(;;)?"
      },
      {
        "options": [
          {
            "title": "2",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "0 1 2",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "1 2",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведется в консоли? \n\nlet i = 0; while (i<3) \n{console.log(i); i++;}"
      },
      {
        "options": [
          {
            "title": "Ложь",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Правда",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "При ошибках в написании логики программы, циклы while и for могут выполняться бесконечно.\nПравда или ложь?"
      },
      {
        "options": [
          {
            "title": "Нет способа сделать это",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Использовать do..while",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Указать условие",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Как сделать, чтобы цикл while выполнился хотя бы один раз?"
      },
      {
        "options": [
          {
            "title": "hvatit",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "stop",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "break",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как можно принудительно остановить выполнение цикла?"
      },
      {
        "options": [
          {
            "title": "5",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "4",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "0",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Сколько раз выполнится цикл?\n\nlet i = 5;\nfor (; i < 5; i++) {\nconsole.log(i);\n}"
      },
      {
        "options": [
          {
            "title": "Код не верный",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Код верный",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Верный или не верный код ниже?\n\nlet i = 5;\nfor (i < 5; i++) {\nconsole.log(i);\n}"
      }
    ]
  },
  {
    "id": "18471a94573f4d54b97b2d6bd52dc4ec",
    "title": "Формы",
    "week": "week-16",
    "questions": [
      {
        "options": [
          {
            "title": "Для представления данных пользователя в виде таблицы",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для сбора данных пользователя и отправки их web-браузеру",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для чего служат HTML-формы?"
      },
      {
        "options": [
          {
            "title": "Нет",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Да",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Восстановить исходные значения в полях формы можно только нажатием кнопки сброса?"
      },
      {
        "options": [
          {
            "title": "Нет",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Да",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Отправить данные на сервер можно только нажатием на кнопку отправки?"
      },
      {
        "options": [
          {
            "title": "document.forms.myforms",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "document.forms.value",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "document.forms.form['myform']",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "На форму с именем myform можно ссылаться с помощью.."
      },
      {
        "options": [
          {
            "title": "<input type=\"button\">",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<input type=\"text\">",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<input type=\"reset\">",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким типом задаётся поле ввода в форме текста?"
      },
      {
        "options": [
          {
            "title": "Данные с формы на сервер можно передать двумя методами — GET POST",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Данные с формы на сервер можно передать тремя методами — GET, POST и PATCH",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Данные с формы на сервер можно передать методом GET",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким способом можно отправить данные из формы на сервер?"
      },
      {
        "options": [
          {
            "title": "Да",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нет",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Элементы формы должны быть обязательно заключены в теги <form>?\n"
      },
      {
        "options": [
          {
            "title": "Методом preventDefault()",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Методом stopPropagination()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Методом cancelEvent()",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "При передаче формы происходит событие “submit”. Как можно остановить передачу данных?"
      },
      {
        "options": [
          {
            "title": "Значение было изменено",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "При каждом изменении значения",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Произошло действие по вырезанию/копированию/вставке",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Событие change срабатывает когда …"
      },
      {
        "options": [
          {
            "title": "Регулярные выражения состоят из шаблона и необязательных флагов: g, i, m, u, s, y",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Регулярные выражения состоят из шаблона и обязательных флагов: g, i",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Регулярные выражения состоят из необязательного шаблона и обязательных флагов: g, i, m, u, s, y",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Из чего состоят регулярные выражения?"
      }
    ]
  },
  {
    "id": "0be180fff79d490c911eefd758a4ac7e",
    "title": "Объекты и классы",
    "week": "week-17",
    "questions": [
      {
        "options": [
          {
            "title": "Это разные типы данных",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Объект представляет описание класса, его состояния и поведения, а класс является конкретным воплощением или экземпляром объекта",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Класс представляет описание объекта, его состояния и поведения, а объект является конкретным воплощением или экземпляром класса",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Чем отличается класс от объекта? ",
        "image": null
      },
      {
        "options": [
          {
            "title": "Это набор стандартных функций, из которых можно собрать множество разных объектов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Это специальный метод, служащий для создания и инициализации объектов, созданных с использованием “class”",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Библиотека стандартных компонентов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Внешняя оболочка для встроенных объектов JavaScript",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое конструктор?",
        "image": null
      },
      {
        "options": [
          {
            "title": "User-defined Constructors - конструкторы, объявленные и определенные программистом для использования в конкретном приложении",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Outdoor Constructors - конструкторы внешних библиотек",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "LegoJS",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Built-in Constructors - конструкторы, поставляемые в комплекте со средой выполнения",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие бывают виды конструкторов?",
        "image": null
      },
      {
        "options": [
          {
            "title": "1. ninja\n2. pomidor\n3. site",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "1. ninja\n2. bike\n3. bike",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "1. Error: name is not defined\n2. pomidor\n3. site",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "1. undefined\n2. bike\n3. bike",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет код?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8ac751e0-905b-4adb-934f-dd573d5f7d88%2F%25D0%25A1%25D0%25BD%25D0%25B8%25D0%25BC%25D0%25BE%25D0%25BA_%25D1%258D%25D0%25BA%25D1%2580%25D0%25B0%25D0%25BD%25D0%25B0_2022-10-19_115154.jpg?id=ecd6018d-6374-41f7-b48f-556ab424d079&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Наследование",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Частность",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Инкапсуляция",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Полиморфизм",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие принципы относятся к основным принципам ООП?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Mетод, используемый для присвоения какого-либо значения инкапсулированному полю",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Метод, позволяющий получить данные, доступ к которым напрямую ограничен",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое сеттер?",
        "image": null
      },
      {
        "options": [
          {
            "title": "undefined",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Person {name: 'John'}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Person",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "'John’",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "object",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет код?",
        "image": "https://itgirlschool.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F278f7897-a155-4744-91f1-d123ad875879%2FUntitled.png?table=block&id=9a1016de-2be0-49a3-89a8-aa8f43796af1&spaceId=f098cfa4-dc31-41b0-a467-db910d3cff90&width=480&userId=&cache=v2"
      },
      {
        "options": [
          {
            "title": "{name: 'Valera', age: 23}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "{name: 'Valera', age: 23, city: undefined}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "{name: 'Valera', age: 23, city: 'Amsterdam'}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что выведет код?",
        "image": "https://itgirlschool.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5ec85e3b-4370-424e-b529-4e59754f4735%2FUntitled.png?table=block&id=3efc4b6b-7860-4319-83c9-1d930a9dff68&spaceId=f098cfa4-dc31-41b0-a467-db910d3cff90&width=290&userId=&cache=v2"
      },
      {
        "options": [
          {
            "title": "Геттер",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Сеттер",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Если свойство предназначено только для чтения, то может быть только …",
        "image": null
      },
      {
        "options": [
          {
            "title": "This это возвратное местоимение",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "This - это специальный объект в JS",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Ключевое слово this, используемое в JS, которое имеет особое значение зависящее от контекста, в котором оно применяется",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что означает ключевое слово \"this\"?",
        "image": null
      }
    ]
  },
  {
    "id": "b3ade6db11624ffea0dbb2d3b133d190",
    "title":"Веб-хранилища и JSON-объект",
    "week": "week-18",
    "questions": [
      {
        "options": [
          {
            "title": "LocalStorage “Переживает” перезапуск браузера",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Cookies следует использовать при необходимости хранения большого объема пользовательских данных",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Срок хранения данных в Cookies можно установить вручную",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "SessionStorage ”Переживает” закрытие вкладки",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "SessionStorage ”Переживает” перезагрузку страницы",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Выберите верные утверждения"
      },
      {
        "options": [
          {
            "title": "setItem() и getItem()",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "addItem() и getItem()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "sendItem() и findItem()",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как добавить и получить значение из веб-хранилища? "
      },
      {
        "options": [
          {
            "title": "игнорировать регистр символов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "глобальный поиск",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "многострочный поиск",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "поиск массива",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что означает флаг “m”?"
      },
      {
        "options": [
          {
            "title": "HTML5 pattern=\"/^\\d{1,}$/\"/ и JS проверка паттерна через свойство patternMismatch",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "JavaScript c RegExp",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "HTML5 используя type=\"number”",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "HTML5 используя type=\"num”",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Как сделать input, который будет принимать только числа?"
      },
      {
        "options": [
          {
            "title": "([А-ЯЁ][а-яё]+[\\-\\s]?){3,}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "([A-Z][a-z]+[\\-\\s]?){3,}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "([А-Я][а-я]+[\\-\\s]?){3,}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Найдите регулярное выражение для ФИО на русском языке"
      },
      {
        "options": [
          {
            "title": "Сообщать пользователю о требуемом формате, когда фокус находится в поле ввода",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Пользователь всегда прав, любые данные корректны. Корректировка данных должна происходить  только на стороне сервера.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Использовать атрибут required",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Подсвечивать неверно заполненные поля. Браузер может предоставить нам эту информацию по CSS-псевдоклассу :invalid",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Как обратить внимание пользователя на корректность вводимых данных?"
      },
      {
        "options": [
          {
            "title": "Стили применяются до того, как пользователь начнёт работу с формой. Поля, обязательные для заполнения, сразу подсветятся нам как :invalid",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Проверять мы можем только факт заполнения, но не корректность введенных данных",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Нативная валидация выполняется очень медленно",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие есть недостатки у стандартного способа задания валидации через HTML5?"
      },
      {
        "options": [
          {
            "title": "Не имеет ограничений по времени хранения",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "7 дней",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "3 дня",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Сколько живет localStorage?"
      },
      {
        "options": [
          {
            "title": "Нужно открыть в панеле разработчика вкладку Application",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "В файле webappsstore",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Необходимо установить дополнительное расширение для браузера",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как посмотреть localStorage в браузере?"
      },
      {
        "options": [
          {
            "title": "Только строковые данные",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Массивы и объекты",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Только массивы",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие типы данных можно хранить в sessionStorage?"
      },
      {
        "options": [
          {
            "title": "",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как очистить локальное хранилище в браузере?"
      },
      {
        "options": [
          {
            "title": "С их помощью сайт запоминает информацию о ваших посещениях",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Для хранения большого объема пользовательских данных",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для работы на сайтах в режиме инкогнито",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для чего нужны cookie JS?"
      },
      {
        "options": [
          {
            "title": "Куки нужны для того, чтобы браузер помнил вас и выдавал страницы уже с вашими сохраненными данными и запросами даже спустя большое количество времени",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Куки нужны для того, чтобы вводить банковские данные автоматически",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Куки нужны для того чтобы хранить любые данные в формате ключ-значение",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чём польза cookie?"
      },
      {
        "options": [
          {
            "title": "С ним большие объемы данных быстро обмениваются между браузером и веб-сервером",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "С ним можно работать только методами JavaScript",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Хранение и экспорт данных в ",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие преимущества использования JSON?"
      },
      {
        "options": [
          {
            "title": "Неупорядоченные множества пар в формате ключ:значение",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Массивы",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "значение Null",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Числа",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Логические типы данных",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие значения могут быть использованы в JSON?"
      },
      {
        "options": [
          {
            "title": "JSON.parse()",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "JSON.stringify()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "JSON.fetch()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "JSON.download()",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как брать данные из JSON?"
      },
      {
        "options": [
          {
            "title": "Легко читается.",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Имеет меньший размер файла",
            "isValid": true,
            "comment": "Поэтому эффективно передает данные в Интернет."
          },
          {
            "title": "Обращается к данным через указание свойств объектов.",
            "isValid": true,
            "comment": "let name = obj.property.name;"
          },
          {
            "title": "Поддерживает множество сложных типов данных.",
            "isValid": false,
            "comment": "Включая диаграммы, изображения и другие типы данных."
          },
          {
            "title": "Существуют теги для определения элементов",
            "isValid": false,
            "comment": "С большими файлами структура тегов делает его огромным и сложным для чтения."
          },
          {
            "title": "Чтобы обратиться к данным, нужно сначала провести их анализ.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Не поддерживает массив напрямую.",
            "isValid": false,
            "comment": "Чтобы иметь возможность использовать массив, нужно добавить теги для каждого элемента."
          }
        ],
        "type": "multi",
        "title": "Самостоятельно разберитесь, что за формат данных XML и чем он отличается от JSON.\nВыберите характерные для JSON особенности, которые отличают его от XML."
      }
    ]
  },
  {
    "id": "21ad5ddf333747cc93d1afd460183ca1",
    "title":"Асинхронность и работа с API",
    "week": "week-19",
    "questions": [
      {
        "options": [
          {
            "title": "Асинхронные запросы выполняются последовательно, один за другим.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Асинхронные запросы выполняются в фоновом режиме, а не последовательно.",
            "isValid": true,
            "comment": "Поэтому приложение не зависает во время ожидания события"
          },
          {
            "title": "С помощью них мы получаем  информацию с сервера.",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем особенность асинхронных запросов?"
      },
      {
        "options": [
          {
            "title": "Ответ можно обработать только один раз, либо текст, либо JSON.",
            "isValid": true,
            "comment": "Мы можем выбрать только один метод чтения ответа. Если мы уже получили ответ с response.text(), тогда response.json() не сработает, так как данные уже были обработаны."
          },
          {
            "title": "После response.json() можно вызвать response.text(), но не наоборот.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно обрабатывать в любой последовательности.",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли обработать ответ от сервера одновременно и как текст, и как JSON?"
      },
      {
        "options": [
          {
            "title": "В том, что нет отправки запроса по submit",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "В асинхронности запроса",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "В том, что запрос пойдет на сервер",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем преимущество AJAX-запросов перед старым способом работы с сервером через <form action=’server_script_name’>"
      },
      {
        "options": [
          {
            "title": "Цикл событий, который ",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Совокупность асинхронных операций",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Бесконечный цикл задач браузера",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое цикл событий (event loop) в JS ?"
      },
      {
        "options": [
          {
            "title": "Информационные 1хх",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Успешные 2хх",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Отклоненные 3хх",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Клиентские ошибки 4хх",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Браузерные ошибки 5хх",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие коды ответа (состояния) HTTP существуют?"
      },
      {
        "options": [
          {
            "title": "VSCode ⇒ терминал ⇒ get headers -a",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Инструмент разработчика в браузере ⇒ Network ⇒ нужный запрос ⇒ Headers",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Инструмент разработчика в браузере ⇒ Performance ⇒ Headers",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как посмотреть заголовки запроса к странице или API?"
      },
      {
        "options": [
          {
            "title": "Набор правил того, как организовать написание кода серверного приложения, чтобы все системы легко обменивались данными и приложение можно было масштабировать",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Протокол передачи данных",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Способ взаимодействия сайтов и веб-приложений с пользователем",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Самостоятельно разберитесь, что такое REST?"
      },
      {
        "options": [
          {
            "title": "POST запрос может передать больший объем данных (объект).",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "GET запрос запрашивает данные с сервера; POST - отправляет на сервер.",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "GET запрос отправляет данные на сервер; POST - запрашивает данные с сервера.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "При GET запросе данные не защищены; при POST - защищены",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "POST запрашивает данные с помощью параметров ключ-значение. ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "GET запрос может передать больший объем данных (объект).",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Выберите правильные утверждения."
      },
      {
        "options": [
          {
            "title": "POST ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "GET",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Promise() ",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой вид запроса лучше использовать для получения отфильтрованного списка товаров?"
      },
      {
        "options": [
          {
            "title": "Это стандарт современных браузеров, обеспечивающий взаимодействие между клиентом и сервером из разных источников",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Это ответ сервера, который позволяет совместное использование ресурсов одним источником",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Это механизм, который запрещает дополнительные заголовки HTTP",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Самостоятельно разберитесь, что такое CORS?"
      },
      {
        "options": [
          {
            "title": "application/x-www-form-urlencoded ",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "multipart/form-data ",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "application/json",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "text/json",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "application/form-submitted",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Что можно писать в параметре заголовков "
      },
      {
        "options": [
          {
            "title": "Promise может находиться в одном из трех состояний:\npending - стартовое состояние, операция стартовала,\nfulfilled - получен результат,\nrejected - ошибка",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Promise используется для отложенных и асинхронных вычислений",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "В Promise можно свободно менять состояния между pending, fulfilled и rejected",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Изменить состояние промиса можно, вызвав колбэки resolve или reject, переданные аргументами в функцию-исполнитель",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Выберите утверждения, верно описывающие промисы (promise):"
      }
    ]
  },
  {
    "id": "a6805d0a730f44c0b4b9488140fb8e92",
    "title": "Обработка ошибок. Node.js и npm",
    "week": "week-20",
    "questions": [
      {
        "options": [
          {
            "title": "Cитуация, при которой функция не может выполнить то, что она обещает.",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Сообщение в консоли",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Всплывающие модальное окно в браузере",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что считается ошибкой в JS?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Ошибки, которые возникают во время фазы чтения кода",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Ошибки, которые возникают во время выполнения кода",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Так называют все ошибки возникающие в коде",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие ошибки называют “ошибками парсинга”?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Появляется сообщение в консоли",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "JavaScript генерирует объект, содержащий детали ошибки",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Ошибка записывается в локальное хранилище",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что происходит при возникновении ошибки?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Он содержит объект ошибки с подробной информацией о произошедшем",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "С помощью блока finally можно выполнить очистку всех ресурсов, выделенных в блоке try, и запускать код даже при возникновении исключения в блоке try",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Позволяет обрабатывать ошибки во время исполнения кода",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Зачем нужен блок “finally”?",
        "image": null
      },
      {
        "options": [
          {
            "title": "try{alert()}finally(error) {alert”Имя пользователя не заполнено”)}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "try{alert()}catch(error){alert”Имя пользователя не заполнено”)}",
            "isValid": true,
            "comment": "Поэтому приложение не зависает во время ожидания события"
          },
          {
            "title": "finally {alert()}catch(error) {alert”Имя пользователя не заполнено”)}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Есть следующий код.  Как сделать так, чтобы при обращении к нему выводилось внятное сообщение об ошибке \"Имя пользователя не заполнено\"?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4722f778-8f22-469b-bc40-3412a3f9a536%2F%25D0%25A1%25D0%25BD%25D0%25B8%25D0%25BC%25D0%25BE%25D0%25BA_%25D1%258D%25D0%25BA%25D1%2580%25D0%25B0%25D0%25BD%25D0%25B0_2022-10-19_120748.jpg?id=8db9bbbb-148d-4a88-a4c5-0ae938d4cab7&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Обработать ошибку внутри catch",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "С помощью throw",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Сделать корректный Java Script код",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как сгенерировать собственную ошибку, например, в случае некорректного формата данных?",
        "image": null
      },
      {
        "options": [
          {
            "title": "npm init",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "npm fetch",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "npm run start",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какую команду надо ввести, чтобы сгенерировался файл package.json?",
        "image": null
      },
      {
        "options": [
          {
            "title": "try {\nparseInt('ыыыы');\n}\ncatch (error) {\nconsole.log(error);\n}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "try {\nparseInt('ыыыы');\n}\nfinally (error) {\nconsole.log(error);\n}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "throw {\nparseInt('ыыыы');\n}\ncatch (error) {\nconsole.log(error);\n}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Приведите пример захвата ошибки в случае некорректного преобразования данных   console.log(parseInt('ыыыы'));",
        "image": null
      },
      {
        "options": [
          {
            "title": "npm run start",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "npm -v",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "npm i",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как узнать, установлен ли у тебя менеджер пакетов ",
        "image": null
      },
      {
        "options": [
          {
            "title": "Сборщик исправляет ошибки в коде самостоятельно, предлагая 5 новых вариантов для разработчика.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Это процесс преобразования исходного кода программы в готовый продукт. сборка проекта позволяет ускорить и упростить разработку.",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "WEBPACK",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Gulp, Brunch",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Что такое сборщик и зачем он нужен? Какие еще бывают сборщики помимо “Browserify”?",
        "image": null
      }
    ]
  },
  {
    "id": "6392592920074cb394474fa5052b8a81",
    "title": "Введение в React",
    "week": "week-21",
    "questions": [
      {
        "options": [
          {
            "title": "Обязательно в любом случае",
            "isValid": false,
            "comment": "Если мы используем отдельные react-компоненты на странице, то достаточно добавить три <script>-тега перед </body>."
          },
          {
            "title": "Обязательно, если мы создаём React-приложение",
            "isValid": true,
            "comment": "Верно! Для создание React-приложения используй команду npx create-react-app my-app"
          }
        ],
        "type": "solo",
        "title": "Обязательно ли скачивать и устанавливать какие-то библиотеки для начала работы с ReactJS?"
      },
      {
        "options": [
          {
            "title": "Обрабатывает и на стороне клиента, и сервера",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Повышает производительность приложений с помощью Virtual DOM",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "JSX  создаёт код, лёгкий для чтения и записи",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Легко выполняет интеграцию с другими фреймворками (Angular, BackboneJS), так как является библиотекой с открытым исходным кодом",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Все вышеперечисленные",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Перечислите плюсы SPA-приложения"
      },
      {
        "options": [
          {
            "title": "Процесс обучения может быть медленным",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Является только уровнем просмотра, всё ещё есть необходимость подключать код для AJAX-запросов, событий и т.д.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Сама библиотека довольно большая",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Все вышеперечисленные",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Перечислите минусы SPA-приложения"
      },
      {
        "options": [
          {
            "title": "Установить пакет в каталог глобальных node-пакетов, инициализировать React-приложение",
            "isValid": true,
            "comment": "Верно! Используй команды npm install react react-dom и npx create-react-app my-app"
          },
          {
            "title": "Установить Typescript, установить все зависимости для проекта",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Создать в текстовом редакторе файл package.json, перенести его в среду разработки",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как создать React-приложение?"
      },
      {
        "options": [
          {
            "title": "Библиотека для создания интерфейсов взаимодействия",
            "isValid": true,
            "comment": "Верно! React - это библиотека для создания пользовательских интерфейсов. В процессе создания приложения можно выбирать необходимые пакеты и инстpументы"
          },
          {
            "title": "Фреймворк на стороне сервера",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Фреймворк пользовательского интерфейса",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что такое ReactJS?"
      },
      {
        "options": [
          {
            "title": "Django, Laravel, Flask",
            "isValid": false,
            "comment": "Это бэкенд-фреймворки"
          },
          {
            "title": "Vue, Angular, Ember, Backbone.js",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Play, CakePHP, Fiber Framework",
            "isValid": false,
            "comment": "Это бэкенд-фреймворки"
          }
        ],
        "type": "solo",
        "title": "Какие веб-фронтенд фреймворки вы знаете?"
      },
      {
        "options": [
          {
            "title": "export default Component",
            "isValid": false,
            "comment": "Эта команда используется для экспорта компонента из файла или модуля"
          },
          {
            "title": "@Component",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "import { Component } from ‘…’",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой командой можно добавить библиотеку или компонент в свой файл?"
      },
      {
        "options": [
          {
            "title": "chart.js",
            "isValid": false,
            "comment": "Это js-библиотека для создания графиков и диаграмм"
          },
          {
            "title": "react-day-picker ",
            "isValid": true,
            "comment": "Верно! Это компонент выбора даты для React"
          },
          {
            "title": "react-hook-form",
            "isValid": true,
            "comment": "Верно! Эта библиотека упрощает создание и обработку форм в React-приложениях"
          },
          {
            "title": "validate-js",
            "isValid": false,
            "comment": "Это js-библиотека для валидации форм"
          },
          {
            "title": "framer-motion",
            "isValid": true,
            "comment": "Верно! Это билиотека для анимации React-приложений"
          }
        ],
        "type": "multi",
        "title": "Укажите три внешних React-компонента, которые вам могут пригодиться в будущем"
      },
      {
        "options": [
          {
            "title": "src/index.js",
            "isValid": true,
            "comment": "Верно! Это точка входа для нашего приложения, куда мы импортируем все модули и необходимые ресурсы. Именно здесь отражаются все изменения"
          },
          {
            "title": "public/index.html",
            "isValid": false,
            "comment": "React внедряет код в этот файл, чтобы браузер мог его запустить, а все изменения делаются в index.js"
          },
          {
            "title": "src/App.js",
            "isValid": false,
            "comment": "Это всего лишь один из компонентов, который может называться и по-другому"
          }
        ],
        "type": "solo",
        "title": "Какой основной файл SPA-проекта, где мы делаем изменения?"
      },
      {
        "options": [
          {
            "title": "Содержит файл HTML, npm start",
            "isValid": false,
            "comment": "Эта команда нужна для запуска проекта на локальном хостинге"
          },
          {
            "title": "Содержит все готовые файлы при сборке приложения для продакшн-окружения, npm build",
            "isValid": true,
            "comment": "Верно! Затем можно скопировать файлы из папки build на сервер хостинг-провайдера"
          },
          {
            "title": "Тут лежит основной код проекта, npm deploy",
            "isValid": false,
            "comment": "Эту команду можно настроить для выгрузки приложения на продакшн, например, на github-pages"
          }
        ],
        "type": "solo",
        "title": "Зачем нужна папка build, и какой командой мы генерируем её содержимое?"
      }
    ]
  },
  {
    "id": "8b7b1f59da27476f8110c48a94a025c6",
    "title": "Компоненты",
    "week": "week-22",
    "questions": [
      {
        "options": [
          {
            "title": "маленькие, повторно используемые части кода, которые возвращают React-элементы для отображения на странице",
            "isValid": false,
            "comment": "это React-компоненты"
          },
          {
            "title": "составляющие блоки React-приложений",
            "isValid": false,
            "comment": "это React-элементы"
          },
          {
            "title": "входные данные React-компонентов, передаваемые от родительского компонента дочернему компоненту",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "настраиваемые функции, которые выполняются на различных этапах жизни компонента",
            "isValid": false,
            "comment": "это методы жизненного цикла"
          }
        ],
        "type": "solo",
        "title": "Props - это",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет, только в классовых компонентах",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно использовать",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли использовать props в функциональных компонентах?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Вместо атрибута \"class\" в JSX используется \"className\"",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "В JSX вам нужен тег script или внешний файл JavaScript для реализации JavaScript:{...}",
            "isValid": false,
            "comment": "в HTML нужен тег script или внешний файл JavaScript для реализации JavaScript:{...}"
          },
          {
            "title": "Вместо атрибута \"className\" в JSX используется \"class\"",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Чем отличается JSX от HTML?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Можно использовать, только если внутри классовые компоненты",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нельзя использовать",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "JSX не является обязательным для работы с React",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Можно использовать только если внутри функциональные компоненты",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли использовать React без JSX?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Чтобы вывести (или не вывести) компонент по какому-либо условию",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Позволяют создавать динамические компоненты",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Позволяют выполнить какие-то действия при изменении компонента",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Проверяет код во время компиляции, а не во время выполнения.",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Для чего нам нужны свойства (props) компонентов?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Вместо <React.Fragment> можно обернуть код в <ul></ul>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Вместо <React.Fragment> можно обернуть код в <Fragment ></Fragment>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Вместо <React.Fragment> можно обернуть код в <ListItem ></ListItem >",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Вместо <React.Fragment> можно обернуть код в пустые скобки <></>",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В примере с CardList чем можно было бы заменить <React.Fragment>",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8744cdb2-d2f0-428e-801c-6f3ec0a61c41%2F26.6.png?id=4c8c2c02-6215-4552-be5c-9a7e1e3b9289&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Нет, нужно обязательно использовать и классовые компоненты",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно, если это простое приложение(без ссылок, изменения и сохранения данных введенных пользователем и т.п)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Все, что можно сделать с помощью компонентов класса, можно сделать и с помощью функциональных компонентов.",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли полностью описать приложение, используя только функциональные компоненты?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Export default",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Render",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Props",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Export ",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой командой мы делаем экспорт компонента для возможности его использования в других местах приложения?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Свойства для работы со значениями, состояния для работы с функциями",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Состояния для работы со значениями, свойства для работы с функциями",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Состояния можно изменить, свойства нельзя",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Чем свойства отличаются от состояний?",
        "image": null
      },
      {
        "options": [
          {
            "title": "ReactComponent",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "ReactJS.Component",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "React.Component",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "От какого класса идет наследование всех компонентов?",
        "image": null
      },
      {
        "options": [
          {
            "title": "render()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "reduce()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "map()",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "filter()",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой командой можно сгенерировать разметку/компоненты на основе заранее заданного массива элементов?",
        "image": null
      }
    ]
  },
  {
    "id": "a977b756f1694b3fa98d3592cef88f3e",
    "title": "CSS в React",
    "week": "week-23",
    "questions": [
      {
        "options": [
          {
            "title": "fontSize: ‘1.5 em’",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "width: 200, height: 50",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<button style={ myStyle }>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какую ошибку я допустила в этом примере?"
      },
      {
        "options": [
          {
            "title": "1, 2",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "2, 3, 4",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "1, 2, 3, 4",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "1. Какие есть способы работы со стилями в React? \n1) Инлайновая стилизация \n2) Таблицы стилей CSS \n3) CSS модули \n4) CSS-препроцессоры"
      },
      {
        "options": [
          {
            "title": "Reference error",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Отобразится кнопка «заказать»",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Карточка не будет отображаться полностью",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как будет выглядеть карточка товара, если ей передать атрибут addedToCart===0?"
      },
      {
        "options": [
          {
            "title": "Проверить наличие товара в целом",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Никаких проверок больше не требуется",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какие еще проверки нужно было бы сделать для атрибута addedToCart?"
      },
      {
        "options": [
          {
            "title": "Условный оператор не нужен, можно все сделать версткой",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Использовать условный оператор if без else",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Использовать для проверки товаров тернарный оператор",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Клиент попросил повесить тег \"New\" на товары из новой коллекции. Какой условный оператор выбрать?"
      },
      {
        "options": [
          {
            "title": "1",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "1, 2, 3",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "2, 3",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "1. Какими тремя способами можно написать условный рендеринг? \n1) Условный оператор if 2) Тернарный оператор 3) Логический оператор && и/или ||"
      },
      {
        "options": [
          {
            "title": "render with arguments",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "PropTypes",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Props",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что используется для передачи данных к компоненту извне?"
      },
      {
        "options": [
          {
            "title": "1, 4, 6",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "2, 3, 4, 5",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "1, 2, 3, 4, 5, 6",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем преимущества использования препроцессоров? \n1) Разделение на небольшие файлы \n2) Возможность вычисления математических операций \n3) Вложенность \n4) Использование амперсанда & \n5) Примеси (миксины) \n6) Возможность вводить переменные"
      },
      {
        "options": [
          {
            "title": "@include и/или @extend",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Больше способов нет",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой есть еще способ использовать переменные, кроме $ в препроцессорах?"
      }
    ]
  },
  {
    "id": "f91e4637c31f49a59293735f85ddb341",
    "title": "Props & State",
    "week": "week-24",
    "questions": [
      {
        "options": [
          {
            "title": "1, 2, 3, 4",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "3, 4",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "1, 2",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "2, 3, 4",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Выберите основные отличия state от props:\n1) Работа с данными;\n2) Роль данных (передача данных, управление внутри компонентов);\n3) Тип;\n4) Начальное значение",
        "image": null
      },
      {
        "options": [
          {
            "title": "Метод push не сработает, так как применяется к объекту",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Ошибки в данном коде нет",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "state меняется напрямую, а только потом применяется метод для его изменения",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какую ошибку я допустила в коде, и как её исправить?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F98ae7991-bf36-467e-9782-634f050cc613%2F2022-12-04_12-31-36.png?id=fd4b51b7-ee0c-4b14-87c4-707111c6e3ad&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=820&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Да",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Можно только onСlick",
            "isValid": false,
            "comment": "Можно кликнуть по элементу (onClick) и навести на него мышью (onMouseOver)"
          },
          {
            "title": "Нет",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли повесить на один элемент несколько обработчиков событий?",
        "image": null
      },
      {
        "options": [
          {
            "title": "state нельзя изменить",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Использовать метод setState",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Можно обратиться напрямую к state и изменить",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким образом можно изменить state?",
        "image": null
      },
      {
        "options": [
          {
            "title": "false, true",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "false, false",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Попробуйте предсказать, какие сообщения будут в консоли:",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0e8a41c4-e737-42c0-9e2b-8bac1625103d%2F2022-12-04_12-52-18.png?id=9261e934-92d9-4762-bf8c-3e85b95bf235&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=820&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Стрелочной функцией",
            "isValid": true,
            "comment": "Верно! Правильнее использовать стрелочную функцию, потому что она не имеет контекста и улучшает производительность"
          },
          {
            "title": "Функциональным выражением",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Обычным объявлением функции",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Каким способом лучше всего задать функцию handleChange?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Наличие хуков (захват состояний)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Классовые компоненты не поддерживают export",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Функциональные компоненты работают медленнее",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Чем отличаются классовые и функциональные компоненты?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Да, есть",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Есть только в тех функциональных компонентах, которые вложены в классовый",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Есть ли this в функциональных компонентах?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Да, они не зависимы друг от друга",
            "isValid": true,
            "comment": "Верно! Только значения из state должны использоваться при рендеринге, иначе не имеет смысла хранить их в state ."
          },
          {
            "title": "Нет, они будут конфликтовать",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли использовать props и state одновременно?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Их нельзя задать без команды this.setState",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "В функциональных компонентах",
            "isValid": true,
            "comment": "Верно! Для этого используй хук useState"
          },
          {
            "title": "В конструкторе классового компонента",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Где можно задать state без использования команды this.setState?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Состояние классового компонента может не быть объектом, а функционального - не может",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Состояние классового компонента обязательно объект, а функционального - не обязательно",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Состояние классового компонента обязательно объект, как и функционального",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Может ли состояние классового компонента не быть объектом? А функционального?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Да",
            "isValid": false,
            "comment": "В функциональных компонентах состояние можно хранить, используя хук useState"
          }
        ],
        "type": "solo",
        "title": "Способны ли функциональные компоненты самостоятельно хранить состояние?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Хуки не используются внутри классового компонента, но можно комбинировать классы и функциональные компоненты с хуками в одном дереве",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Хуки не работают внутри классов, а используются вместо них",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Также, как и в функциональных",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Как использовать хуки в классовых компонентах?",
        "image": null
      },
      {
        "options": [
          {
            "title": "С помощью оператора расширения (…props)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "С помощью defaultProps",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "С помощью state",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как задать начальное состояние props, если они ещё не были переданы?",
        "image": null
      }
    ]
  },
  {
    "id": "d85dbd8e41c2426c984d56a2e502781b",
    "title": "Жизненный цикл компонента",
    "week": "week-25",
    "questions": [
      {
        "options": [
          {
            "title": "Да, так можно сделать",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Нет, не получится",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, только нужно указать this.props.title и this.props.description ",
            "isValid": false,
            "comment": "Больше не нужно указывать this.props, так как в данном примере реализована деструктуризация пропсов "
          }
        ],
        "type": "solo",
        "title": "В компонент передаются атрибуты ‘description’ и ‘title’. Могу ли я их сложить, как в примере, чтобы получить одну строку и вывести в компоненте?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4ce560ba-76c4-4a21-8f91-c7f4adbfe4c9%2F2022-11-28_22-11-21.png?id=b9ac6e32-2cd3-4a15-ba18-b73b81d289dd&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=820&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "componentDidMount()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "shouldComponentUpdate()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "componentDidUpdate()",
            "isValid": true,
            "comment": "Верно! Он принимает предыдущее состояние prevProps и будущее состояние nextProps и сравнивает их"
          }
        ],
        "type": "solo",
        "title": "С помощью какого метода можно отловить изменения ‘props’?",
        "image": null
      },
      {
        "options": [
          {
            "title": "firstObj является ссылкой на initialObj, а secondObj - это новый объект, скопированный с initialObj",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "При изменении свойств secondObj они также поменяются и у initialObj",
            "isValid": false,
            "comment": "secondObj - это новый объект со своими свойствами"
          },
          {
            "title": "При изменении свойств secondObj они не поменяются у initialObj",
            "isValid": true,
            "comment": "Верно! Это новый объект со своими свойствами"
          }
        ],
        "type": "multi",
        "title": "Оператор расширения часто используется также для клонирования объекта. Чем отличаются эти две записи, и какую проблему решает здесь оператор расширения?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0e719e0c-0216-4761-954a-4454418232cc%2F2022-11-28_22-49-05.png?id=78bfb400-4080-440c-a4d8-0ba972fad32b&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=820&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "componentWillUnmount() при размонтировании компонента",
            "isValid": false,
            "comment": "В этом методе выполняется необходимый сброс: отмена подписок и сетевых запросов, таймеров и др."
          },
          {
            "title": "componentDidMount() при монтировании компонента",
            "isValid": true,
            "comment": "Верно! Этот метод вызывается один в жизненном цикле сразу после монтирования компонента. Перед ним выполняется рендер."
          },
          {
            "title": "shouldComponentUpdate() при обновлении компонента",
            "isValid": false,
            "comment": "На этом этапе жизненного цикла данные компонента обновляются в ответ на пользовательские события. Происходит повторный рендер"
          }
        ],
        "type": "solo",
        "title": "В каком из методов жизненного цикла лучше всего использовать методы вызова API и обращения к веб-хранилищам, если они должны быть вызваны всего один раз при загрузке страницы?",
        "image": null
      },
      {
        "options": [
          {
            "title": "getSnapshotBeforeUpdate()",
            "isValid": false,
            "comment": "Этот метод вызывается перед последним рендером компонента. Это позволяет получить информацию о модели  DOM до того, как она будет изменена"
          },
          {
            "title": "componentDidUpdate()",
            "isValid": false,
            "comment": "Этот метод вызывается сразу после обновления компонента (если shouldComponentUpdate возвращает true). В качестве параметров передаются старые значения объектов state и props."
          },
          {
            "title": "componentDidCatch()",
            "isValid": true,
            "comment": "Верно! Этот метод даёт возможность разработчику отловить и залогировать ошибки"
          }
        ],
        "type": "solo",
        "title": "С помощью какого метода можно отловить и отрисовать для пользователя возникшую в компоненте ошибку?",
        "image": null
      },
      {
        "options": [
          {
            "title": "В нём устанавливается метод render() для отрисовки jsx-компонента на странице",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "В нём устанавливается состояние (state) и свойства (props), осуществляется привязка обработчиков событий к экземпляру",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "В нём осуществляется export необходимых компонентов",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой код обычно пишут в конструкторе? Для каких задач он используется?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Осуществляет размонтирование компонента",
            "isValid": false,
            "comment": "Размонтирование происходит в методе жизненного цикла componentWillUnmount()"
          },
          {
            "title": "Создаёт дочерние элементы компонента",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Отвечает за отображение компонента при монтировании и при изменении состояния",
            "isValid": true,
            "comment": "Верно! Это единственный обязательный метод в классовом компоненте. Функция render() должна быть чистой: не изменять состояние компонента, всегда возвращать один и тот же результат, не взаимодействовать напрямую с браузером"
          }
        ],
        "type": "solo",
        "title": "Что делает функция ‘render()’?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Изменения state",
            "isValid": true,
            "comment": "Верно! При изменении состояния компонента, его необходимо перерисовать"
          },
          {
            "title": "Вызов метода forceUpdate()",
            "isValid": true,
            "comment": "Верно! Вызов forceUpdate() принудительно повторно отрисовывает  компонент, пропуская метод shouldComponentUpdate()"
          },
          {
            "title": "Перехват ошибки",
            "isValid": true,
            "comment": "Верно! При возникновении ошибки необходимо уведомить об этом пользователя, перерисовав компонент"
          },
          {
            "title": "Перерисовка родительского компонента",
            "isValid": true,
            "comment": "Верно! При изменении родительского компонента происходит проверка, затронули ли изменения дочерний элемент "
          }
        ],
        "type": "multi",
        "title": "Что может вызвать ‘render()’ компонента?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Определить значения по умолчанию с помощью defaultProps: class Timer extends React.Component {\n    static defaultProps = { minutes: 0,\n        seconds: 0};\n    constructor(props) {\n        super(props);\n        this.state = {\n            minutes: this.props.minutes,\n            seconds: this.props.seconds\n        }:\n    }\n",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Нужно задать начальные значения в самом объекте с пропсами: class Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        const {minutes: 0, seconds: 0} = this.props\n    }\n}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что нужно изменить в коде из урока (на видео), чтобы начальные параметры компонента приходили из пропсов, но, если пропсы вообще не заданы, начальные значения были инициализированы нулями?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет, это обязательное условие применения useEffect",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно, функция выполнится только один раз после монтирования",
            "isValid": false,
            "comment": "Это произойдет, если второй аргумент всё-таки передаётся, но это пустой массив"
          },
          {
            "title": "Можно, эффект будет запускать при каждом обновлении компонента",
            "isValid": true,
            "comment": "Верно! По умолчанию useEffect запускается как после первого рендера, так и после каждого обновления"
          }
        ],
        "type": "solo",
        "title": "Можно ли не передавать второй аргумент в хук ‘useEffect’, и что тогда произойдет?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет, это приведет к переполнению стека",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, можно использовать столько раз, сколько нужно",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Можно, но только при обязательном указании параметров, при изменении которых вызывается функция эффекта",
            "isValid": false,
            "comment": "Массив с параметрами не обязательно указывать внутри useEffect, тогда эффект будет запускать при каждом обновлении. \nЕсли передать пустой массив в качестве второго аргумента, эффект запуститься и очиститься только один раз"
          }
        ],
        "type": "solo",
        "title": "Можно ли несколько раз использовать хук ‘useEffect’ внутри одного компонента?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Функция вызовется только один раз перед размонтированием компонента",
            "isValid": true,
            "comment": "Верно! Если эффект возвращает функцию, React выполнит её только тогда, когда наступит время сбросить эффект"
          },
          {
            "title": "Повторный вызов эффекта",
            "isValid": false,
            "comment": "Очередной вызов эффекта происходит при изменении переданных в качестве второго аргумента параметров"
          },
          {
            "title": "Вызов новой функции",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что означает возвращение функции в теле эффекта?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет, потому что в скобках не указаны дочерние элементы, которые должны быть перерисованы",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, так как произойдёт перерендер компонента, а с ним - и дочерних элементов",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Нет, так как рендер дочерних элементов не зависит от родительского компонента",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Будут ли перерисованы дочерние элементы компонента при вызове метода ‘forceUpdate()’?",
        "image": null
      }
    ]
  },
  {
    "id": "0cb628a85e2b4bfc91428fef88ed74a3",
    "title": "Роутинг",
    "week": "week-26",
    "questions": [
      {
        "options": [
          {
            "title": "{<About />}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "{<Users />}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "{<Home />}",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Если в данном примере изменить порядок Route таким образом. То какой компонент будет отрисован по адресу /users?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd0490e1c-742c-41ca-aab5-6c6e3bbd3b1a%2F33.1.png?id=3ff8adfb-4527-40d4-9bfd-5729c78e1a35&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Страница пользователя {number}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Моя личная страница",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "12345",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какое сообщение появится на экране по адресу ",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6b841229-c8d5-496f-8857-7ae918986a78%2F33.2.png?id=35c1d773-d486-4a2a-9ce4-cbce5d782aea&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Массив текущего элемента",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Значение по умолчанию — ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Значение текущего элемента",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Индекс массива текущего элемента",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой второй параметр принимает метод map?",
        "image": null
      },
      {
        "options": [
          {
            "title": "{shoes.map((item.price <50, index)=> return (…..)})}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "{shoes.filter(shoes => shoes.price <50).map((item, index)=> return (…..)})}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "{shoes.filter(index => index.price <50).map((item, index)=> return (…..)})}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "{shoes.map((item <50, index)=> return (…..)})}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как бы вы подошли к решению задачи по выводу компонентом <CardList> только тех экземпляров компонента <Card>, цена которых не превышает заданную(Например, 50$)?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0b8043cc-62fc-44ec-8155-cae49f34b8ab%2F33.4.png?id=eede6026-e0e4-4c5e-914b-f0df3a102c24&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "<Route path='/user/filter' element={<User />}/>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<Route path='/user:filter' element={<User />}/>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<Route path='/user/:filter' element={<User />}/>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<Route path='/filter' element={<User />}/>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как задать параметр в пути? Например, ",
        "image": null
      },
      {
        "options": [
          {
            "title": "Element будет работать только, когда указано exact path. \n Children будет отображаться только, когда указано path",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Children будет работать только, когда удовлетворится сопоставление в path. \nElement будет всегда отображаться  - независимо от того сопоставляется ли path или нет",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Element будет работать только, когда удовлетворится сопоставление в path. \n Children будет всегда отображаться  - независимо от того сопоставляется ли path или нет",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какая разница между element и children в указании роутера?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Параметр отключает частичное сравнение Route и гарантирует, что он возвращает route только в том случае, если path точно совпадает с текущим URL-адресом",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Для ускорения написания кода этот параметр включает частичное сравнение Route и он возвращает route даже если path не точно совпадает с текущим URL-адресом, чтобы в случае ошибки в path, всё равно можно было перейти на нужный URL-адрес",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "С помощью exact можно передать дополнительный параметр в path",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Зачем нужен exact?",
        "image": null
      },
      {
        "options": [
          {
            "title": "const handleClick = () => {history(\"/login\");}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "const handleClick = () => {history.push(\"/login\");}",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "const handleClick = (history) => {push(\"/login\");}",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "const handleClick = () => {push.history(\"/login\");}",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как можно сделать перенаправление на другую страницу по клику на кнопку с помощью history?",
        "image": null
      }
    ]
  },
  {
    "id": "dff8db19146742bfbca6b63fc85b64e6",
    "title": "События",
    "week": "week-27",
    "questions": [
      {
        "options": [
          {
            "title": "Нельзя",
            "isValid": true,
            "comment": "Ключи должны быть стабильными, предсказуемыми, уникальными. Нестабильные ключи (например, произведённые с помощью Math.random()) вызовут необязательное пересоздание многих экземпляров компонента и DOM-узлов, что может вызывать ухудшение производительности и потерю состояния у дочерних компонентов."
          },
          {
            "title": "Можно",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно, но нужно добавить еще дополнительные идентификаторы",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли задать атрибут компонента key функцией Math.random()?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4ce560ba-76c4-4a21-8f91-c7f4adbfe4c9%2F2022-11-28_22-11-21.png?id=b9ac6e32-2cd3-4a15-ba18-b73b81d289dd&table=block&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=2000&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "<a href=”#”onClick={this.onClick.bind(this, id)}>click {count} </a>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<a href=”#”onClick={(e)= > this.onClick( id, e)}>click {count} </a>",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "<a href=”#”onClick=(id)= >(e)= >this.onClick()}>click {count} </a>",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "<a href=”#”onClick={this.onClick(this, id)}>click {count} </a>",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой вариант передачи аргументов в обработчики событий самый оптимальный",
        "image": null
      },
      {
        "options": [
          {
            "title": "В отличие от DOM, VirtualDOM не является официальной спецификацией, а представляет собой новый метод взаимодействия с DOM",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "VirtualDOM аналог модели DOM, который имеет свою спецификацию и область применения",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "VirtualDOM никогда не взаимодействует с API DOM и не изменяет его",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Отличий нет, он выступает резервной копией DOM",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем отличие VirtualDOM от обычного?",
        "image": null
      },
      {
        "options": [
          {
            "title": "bar, foo, baz",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "foo, bar, baz",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "baz, bar, foo",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "foo, bar, baz, bar",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В каком порядке выйдут сообщения в консоли?",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2643b3d2-5c2f-4812-a43c-4699ef8b46b9%2FScreenshot_5.png?table=block&id=e821dcef-a359-4b8b-a504-c31efb43ef90&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=1940&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Используется для доступа к элементам DOM при выделении текста, фокуса и проигрывании медиа",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Они заменяют пропсы",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Упрощают хранение дочерних компонентов",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Дают возможность вызвать методы дочерних компонентов из родительского",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какую проблему решает использование рефов?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Да, потому что это изменяет обычный поток данных, вместо этого поток данных направлен снизу вверх без использования callback",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Да, потому что нарушается принцип наследования",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, потому что нарушается принцип инкапсуляции компонента (”независимости” состояния одного от других)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Нет, для React свойственен двунаправленный поток данных и появление рефов решили эту проблему",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Противоречит ли философии реакта вызов методов ребенка из родительского компонента и почему?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нет, для этого используется метод forwardRef и им оборачивается весь компонент",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Можно",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нельзя никаким образом передавать ref дочерним компонентам",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нельзя передавать рефы в функциональных компонентах",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли с помощью хука useRef передать ref дочерним элементам?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Кастомный хук содержит более сложную логику и позволяет решать более специфичные и сложные задачи",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Кастомные хуки дают возможность компонентам разделять общую логику без добавления лишних компонентов",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Кастомные хуки позволяют преобразовать один компонент в другой",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Кастомные хуки позволяют объединять другие хуки из справочника в совершенно новую функцию",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Что дает нам использование кастомных хуков?",
        "image": null
      }
    ]
  },
  {
    "id": "2da04d62efd04fb095e676a0f3640e39",
    "title": "Формы",
    "week": "week-28",
    "questions": [
      {
        "options": [
          {
            "title": "Контролируемым компонентом может быть только элемент формы ввода текста ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "У контролируемых компонентов данные форм хранятся и обрабатываются в состоянии React",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "У контролируемых компонентов есть атрибут их текущего состояния и метод, вызывающийся при их изменении",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Контролируемые компоненты читают значения читают значения прямо из DOM через ref",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Выберите утверждения, относящиеся к контролируемым компонентам?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Да, их нужно всегда использовать вместе, PureComponent не заменяет метод shouldComponentUpdate()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, желательно использовать вместе, так как shouldComponentUpdate() предполагает неглубокую проверку, изменения его props/state могут остаться проигнорированными",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нет, метод shouldComponentUpdate не работает в PureComponent",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нет, так как при использовании PureComponent отслеживание изменений происходит само собой",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Есть ли смысл использовать метод ",
        "image": null
      },
      {
        "options": [
          {
            "title": "Да, так как состояние изменяется",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нет, так как значение count будет равно старой версии",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Будет ли перерисовываться данный компонент?   ",
        "image": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F64aa2d38-8089-463f-8ca7-7858630a0467%2FScreenshot_6.png?table=block&id=9d0731d0-0229-493e-85a5-94e31ac28102&spaceId=cb6e88cf-4d1d-45df-82e0-113ebf69eb58&width=1920&userId=a89e3697-d6f9-4f47-a5c7-4c7a86484e62&cache=v2"
      },
      {
        "options": [
          {
            "title": "Чекбокс будет контролируемым компонентом и будет отмечаться как выбранный по умолчанию",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Чекбокс будет контролируемым, но не будет отмечаться как выбранный по умолчанию",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Чекбокс будет неконтролируемым",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Чекбокс будет неконтролируемым без передачи обработчика onChange",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что будет, если чекбоксу не передать свойство '",
        "image": null
      },
      {
        "options": [
          {
            "title": "Он помогает сократить количество ререндеров в приложении поскольку вызов рендера произойдет, только если обнаружатся изменения в state или props компонента",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Он дает самый удобный способ добавления props по умолчанию",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Он обеспечивает отрисовку не только самого компонента, но и всех дочерних даже если не было изменения props/state",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Он делает глубокое сравнение объектов, поэтому его наследование оптимально для компонентов со сложной структурой данных",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "В чем главное преимущество использования PureComponent?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Компонент будет неуправляемым",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Компонент будет управляемым, defaultValue будет undefined",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Компонент будет управляемым, value будет получено из e.target.value",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Компонент будет одновременно управляемым и неуправляемым",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что будет, если компоненту в input передать метод onChange, но не передавать value?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Нельзя",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно, если в корневом теге в value передать массив и разрешить множественное отображение",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Можно путем передачи selected в нужные option",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно, только если подключить сторонние npm пакеты",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли из обычного select передать список с несколькими выбранными значениями (мультиселект)?",
        "image": null
      },
      {
        "options": [
          {
            "title": "React.isValidElement()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "React.cloneElement()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "React.Fragment()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "React.memo()",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Какой хук играет аналогичную роль React.PureComponent?",
        "image": null
      },
      {
        "options": [
          {
            "title": "Компонент будет контролируемым, но на каждое изменение в input не будет происходить извлечение содержимого e.target.value",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Форма будет контролируемой",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Компонент станет неконтролируемым",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Компонент будет одновременно контролируемым и нет",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Что будет, если компоненту input передать value, но не передать метод onChange?",
        "image": null
      }
    ]
  },
  {
    "id": "8b5e487c14ee40398b5c450510e29891",
    "title": "Context",
    "week": "week-29",
    "questions": [
      {
        "options": [
          {
            "title": "Нет, так как будет потеря в производительности. ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно создать только один контекст в одном приложении, и не более.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно, но в таком случае, создать нужно будет несколько независимых компонентов.",
            "isValid": true,
            "comment": "Чтобы последующие рендеры (связанные с контекстом) были быстрыми, React делает каждого потребителя контекста отдельным компонентом в дереве."
          },
          {
            "title": "Нет, будет затруднительно получить данные.",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли создать несколько контестов в одном приложении?"
      },
      {
        "options": [
          {
            "title": "Да, при добавлении в контекст функции, которая позволит изменить значение этого контекста.",
            "isValid": true,
            "comment": "Довольно часто необходимо изменить контекст из компонента, который находится где-то глубоко в дереве компонентов."
          },
          {
            "title": "Да, через подписку на Provider.",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нет, невозможно повлиять на контекст из вложенных компонентов. ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, с помощью функции, созданной во вложенном компоненте. ",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можем ли мы влиять на контекст из вложенных компонентов?"
      },
      {
        "options": [
          {
            "title": "Добавить в контекст функцию компонента",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Прописать внутри компонента ThemeContext.Consumer",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Созданием объекта Context",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Обернуть компонент ",
            "isValid": true,
            "comment": "В классовых компонентах, где это необходимо, добавляется ThemeContext.Consumer. В функциональных, значения можно получить, используя хук useContext."
          }
        ],
        "type": "solo",
        "title": "Как выбрать компонент, в котором будет определяться контекст?"
      },
      {
        "options": [
          {
            "title": "componentDidMount()",
            "isValid": true,
            "comment": "К этому моменту компонент уже смонтирован, мы не получим потери производительности."
          },
          {
            "title": "componentDidUpdate()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "componentWillUnmount()",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "shouldComponentUpdate()",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "На каком этапе жизненного цикла компонента лучше всего запросить данные с сервера?"
      },
      {
        "options": [
          {
            "title": "401 (ошибка авторизации)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "403 (запрещено)",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "400 (плохой запрос)",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "404 (не найдено)",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "В каких случаях Fetch API вернет сообщение об ошибке"
      },
      {
        "options": [
          {
            "title": "XMLHttpRequest",
            "isValid": true,
            "comment": "устаревший метод"
          },
          {
            "title": "Axios",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "GraphQL",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Provider",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Каким еще способом можно делать запрос к АPI кроме fetch?"
      },
      {
        "options": [
          {
            "title": "Чтобы обеспечить безопасность запросов к другим источникам",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Для быстрого доступа к запрашиваемым данным ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Для повышения производительности ",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Никакой функции он не выполняет, устаревший механизм запроса ",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Зачем нужен CORS?"
      }
    ]
  },
  {
    "id": "29526d7925ce47cfa4690fbc87f02d74",
    "title": "MobX",
    "week": "week-30",
    "questions": [
      {
        "options": [
          {
            "title": "позволяют создавать несколько хранилищ для приложения ",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "позволяют управлять состоянием приложения",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "умеют отслеживать точные изменения, что предотвращает ухудшение производительности",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "у них одинаковые возможности в части управления состоянием",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Какие есть общие особенности у React.Context и MobX?"
      },
      {
        "options": [
          {
            "title": "reaction",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "декоратор",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "provider",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "autorun",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как называется способ оборачивания одного фрагмента кода в другой, например одной функции в другую для расширения её возможностей?"
      },
      {
        "options": [
          {
            "title": "action",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "observer",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "inject",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "computed",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как называется декоратор, которым должна оборачиваться функция изменяющая state или вызывающая сайд-эффекты"
      },
      {
        "options": [
          {
            "title": "Нельзя, shouldComponentUpdate не поддерживается, MobX переопределяет его и автоматически производит рендер при изменении наблюдаемого значения",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Можно, MobX получает от shouldComponent данные перед рендером и проверяет что значения изменились",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нежелательно, лучше применять PureComponent",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Можно, в случае если нужно предотвратить рендер вручную для определенной ситуации",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли использовать @observable вместе с методом shouldComponentUpdate?"
      },
      {
        "options": [
          {
            "title": "inject",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "action",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "observer",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "computed",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как называется декоратор, с помощью которого происходит подписка на изменение данных хранилища?"
      },
      {
        "options": [
          {
            "title": "Нет, иначе невозможно отслеживать изменения",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Нет, их использование является обязательным и улучшает читаемость кода",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, их использование необязательно",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли использовать MobX без декораторов?"
      },
      {
        "options": [
          {
            "title": "Состояние приложения часто обновляется",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Имеется сложная логика обновления состояния",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Всегда, когда можно использовать Context",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Если есть большое количество компонентов с состояниями, в которых используются одни и те же данные",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "multi",
        "title": "Когда есть смысл подключить в приложение менеджеры состояний?"
      },
      {
        "options": [
          {
            "title": "observer",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "inject",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "action",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "computed",
            "isValid": true,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Как называется декоратор для функции, которая отслеживает изменения в наблюдаемых объектах"
      },
      {
        "options": [
          {
            "title": "Да. Это автономная библиотека для управления состоянием ",
            "isValid": true,
            "comment": ""
          },
          {
            "title": "Нет. MobX неавтономен и можно его использовать только с react",
            "isValid": false,
            "comment": ""
          },
          {
            "title": "Да, только нужно подключить еще дополнительные пакеты",
            "isValid": false,
            "comment": ""
          }
        ],
        "type": "solo",
        "title": "Можно ли использовать MobX без React?"
      }
    ]
  }
]